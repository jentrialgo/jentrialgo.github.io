<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Giving back to tech</title><link href="https://jentrialgo.github.io/" rel="alternate"></link><link href="https://jentrialgo.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jentrialgo.github.io/</id><updated>2025-10-17T12:00:00+02:00</updated><entry><title>The perfect strace command</title><link href="https://jentrialgo.github.io/the-perfect-strace-command.html" rel="alternate"></link><published>2025-10-17T12:00:00+02:00</published><updated>2025-10-17T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-10-17:/the-perfect-strace-command.html</id><summary type="html">&lt;p&gt;The Linux utility &lt;code&gt;strace&lt;/code&gt; is essential for diagnosing process–kernel interactions, but its default output is often unusable. The key to effective debugging is using a specific set of flags that transform raw system call data into a structured, time‑stamped, and annotated log.&lt;/p&gt;
&lt;p&gt;According to Avikam Rozenfeld in 
&lt;a href="https://youtu.be/SUO0rQerpMk?t=726"&gt;this presentation&lt;/a&gt;, here is the
essential command template, followed by a breakdown of why each flag is critical:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;strace -f -s 256 -o trace.log -tt -T -y &amp;lt;your_command_here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Flags and why they matter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-f&lt;/strong&gt; — Follow children&lt;br&gt;
  Purpose: Trace child processes spawned by &lt;code&gt;fork&lt;/code&gt;/&lt;code&gt;clone&lt;/code&gt;.&lt;br&gt;
  Key benefit: Ensures you trace the entire application flow (e.g., piped commands).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-s 256&lt;/strong&gt; — Increase string size&lt;br&gt;
  Purpose: Increase the string output limit (default 32 bytes) to 256 bytes.&lt;br&gt;
  Key benefit: Prevents truncation of file paths and data being read or written.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-o &lt;file&gt;&lt;/strong&gt; — Output to file&lt;br&gt;
  Purpose: Redirect all &lt;code&gt;strace&lt;/code&gt; output to a specified log file (e.g., &lt;code&gt;trace.log&lt;/code&gt;).&lt;br&gt;
  Key benefit: Separates trace output from the program's standard output for easier analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-tt&lt;/strong&gt; — Precise timestamp&lt;br&gt;
  Purpose: Prefix every line …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The Linux utility &lt;code&gt;strace&lt;/code&gt; is essential for diagnosing process–kernel interactions, but its default output is often unusable. The key to effective debugging is using a specific set of flags that transform raw system call data into a structured, time‑stamped, and annotated log.&lt;/p&gt;
&lt;p&gt;According to Avikam Rozenfeld in 
&lt;a href="https://youtu.be/SUO0rQerpMk?t=726"&gt;this presentation&lt;/a&gt;, here is the
essential command template, followed by a breakdown of why each flag is critical:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;strace -f -s 256 -o trace.log -tt -T -y &amp;lt;your_command_here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Flags and why they matter:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-f&lt;/strong&gt; — Follow children&lt;br&gt;
  Purpose: Trace child processes spawned by &lt;code&gt;fork&lt;/code&gt;/&lt;code&gt;clone&lt;/code&gt;.&lt;br&gt;
  Key benefit: Ensures you trace the entire application flow (e.g., piped commands).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-s 256&lt;/strong&gt; — Increase string size&lt;br&gt;
  Purpose: Increase the string output limit (default 32 bytes) to 256 bytes.&lt;br&gt;
  Key benefit: Prevents truncation of file paths and data being read or written.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-o &lt;file&gt;&lt;/strong&gt; — Output to file&lt;br&gt;
  Purpose: Redirect all &lt;code&gt;strace&lt;/code&gt; output to a specified log file (e.g., &lt;code&gt;trace.log&lt;/code&gt;).&lt;br&gt;
  Key benefit: Separates trace output from the program's standard output for easier analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-tt&lt;/strong&gt; — Precise timestamp&lt;br&gt;
  Purpose: Prefix every line with the time of day including microsecond resolution.&lt;br&gt;
  Key benefit: Essential for observing the sequence of events across processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-T&lt;/strong&gt; — Time in syscall&lt;br&gt;
  Purpose: Show the time spent inside the kernel for each syscall.&lt;br&gt;
  Key benefit: Quickly spot bottlenecks (e.g., a long &lt;code&gt;poll&lt;/code&gt; timeout).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-y&lt;/strong&gt; — File descriptor paths&lt;br&gt;
  Purpose: Translate file descriptor numbers into associated file paths, pipes, or socket addresses.&lt;br&gt;
  Key benefit: Eliminates manual lookup of fd → path associations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Power user flags (for complex scenarios)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-ff&lt;/strong&gt;&lt;br&gt;
  Use instead of &lt;code&gt;-f&lt;/code&gt; together with &lt;code&gt;-o &amp;lt;prefix&amp;gt;&lt;/code&gt;; writes each child's trace to its own file (e.g., &lt;code&gt;prefix.12345&lt;/code&gt;), preventing interleaved logs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;-e &lt;syscall_set&gt;&lt;/strong&gt;&lt;br&gt;
  Filter output to specific system calls. Examples:  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e trace=file&lt;/code&gt; — file operations  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e trace=open,poll,connect&lt;/code&gt; — specific calls of interest&lt;br&gt;
  Key benefit: Drastically reduces log noise and focuses analysis.&lt;/li&gt;
&lt;/ul&gt;</content><category term="Operating Systems, Debugging"></category><category term="Operating Systems"></category><category term="Debugging"></category></entry><entry><title>To build a new OS, or not to build a new OS?</title><link href="https://jentrialgo.github.io/to-build-a-new-os-or-not-to-build-a-new-os.html" rel="alternate"></link><published>2025-09-07T12:00:00+02:00</published><updated>2025-09-07T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-09-07:/to-build-a-new-os-or-not-to-build-a-new-os.html</id><summary type="html">&lt;h1&gt;To build a new OS, or not to build a new OS?&lt;/h1&gt;
&lt;p&gt;There's a fascinating debate in the software world about whether it still makes sense to create a new general-purpose operating system from scratch.&lt;/p&gt;
&lt;h3&gt;The Pragmatic View&lt;/h3&gt;
&lt;p&gt;On one side, you have figures like John Carmack. In a &lt;a href="https://x.com/ID_AA_Carmack/status/1961172409920491849"&gt;recent discussion on X&lt;/a&gt;, he argued that building a new OS is often impractical. The cost, short lifespan, and developer burden rarely justify the effort, a lesson he learned from opposing Meta's custom XR OS.&lt;/p&gt;
&lt;h3&gt;The Idealistic View&lt;/h3&gt;
&lt;p&gt;On the other side is the spirit of the ultimate craftsman. This is captured perfectly in a joke by DHH during &lt;a href="https://www.youtube.com/watch?v=gcwzWzC7gUA&amp;amp;t=3478s"&gt;this presentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"People who are really serious about software should make their own operating system."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He's riffing on a famous quote by Alan Kay about hardware, but the message is clear: the ultimate challenge for a software purist is to build the whole stack.&lt;/p&gt;
&lt;h3&gt;A Middle Ground: Omarchy&lt;/h3&gt;
&lt;p&gt;Interestingly, DHH's own work offers a third path. He hasn't built an entirely new OS. Instead, he created &lt;a href="https://omarchy.org/"&gt;Omarchy …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h1&gt;To build a new OS, or not to build a new OS?&lt;/h1&gt;
&lt;p&gt;There's a fascinating debate in the software world about whether it still makes sense to create a new general-purpose operating system from scratch.&lt;/p&gt;
&lt;h3&gt;The Pragmatic View&lt;/h3&gt;
&lt;p&gt;On one side, you have figures like John Carmack. In a &lt;a href="https://x.com/ID_AA_Carmack/status/1961172409920491849"&gt;recent discussion on X&lt;/a&gt;, he argued that building a new OS is often impractical. The cost, short lifespan, and developer burden rarely justify the effort, a lesson he learned from opposing Meta's custom XR OS.&lt;/p&gt;
&lt;h3&gt;The Idealistic View&lt;/h3&gt;
&lt;p&gt;On the other side is the spirit of the ultimate craftsman. This is captured perfectly in a joke by DHH during &lt;a href="https://www.youtube.com/watch?v=gcwzWzC7gUA&amp;amp;t=3478s"&gt;this presentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"People who are really serious about software should make their own operating system."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He's riffing on a famous quote by Alan Kay about hardware, but the message is clear: the ultimate challenge for a software purist is to build the whole stack.&lt;/p&gt;
&lt;h3&gt;A Middle Ground: Omarchy&lt;/h3&gt;
&lt;p&gt;Interestingly, DHH's own work offers a third path. He hasn't built an entirely new OS. Instead, he created &lt;a href="https://omarchy.org/"&gt;Omarchy&lt;/a&gt;, an "opinionated Arch + Hyprland Setup."&lt;/p&gt;
&lt;p&gt;Omarchy is a customized version of Arch Linux, tailored for a keyboard-first, developer-focused workflow. It's a practical compromise: leveraging the stable foundation of Linux while building a bespoke user experience on top. It avoids reinventing the kernel but still achieves the goal of a perfectly tailored environment.&lt;/p&gt;
&lt;h3&gt;The End of the OS Wars?&lt;/h3&gt;
&lt;p&gt;This conversation raises a bigger question: have we reached the end of the line for general-purpose operating systems? For decades, the landscape has been dominated by two major families: &lt;strong&gt;Unix-likes&lt;/strong&gt; (now primarily Linux and macOS) and &lt;strong&gt;Windows&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The sheer scale of these ecosystems is staggering. They have decades of development, vast hardware support, and millions of applications. For any newcomer to compete, they wouldn't just need a better kernel; they'd need to replicate this entire universe. The network effect is so strong that it creates an almost insurmountable barrier to entry.&lt;/p&gt;
&lt;p&gt;I'm with Carmack on this one. The practical challenges of building a new OS are immense, and the likelihood of widespread adoption is slim. The only way I see this changing is if some hardware company decides to break the mold for new hardware, using a modern language (Rust?) and bridging the gap with existing ecosystems by using AI. But, even then, the odds are against them.&lt;/p&gt;</content><category term="Operating Systems, Software Development"></category><category term="Operating Systems"></category><category term="Software Development"></category><category term="Linux"></category><category term="Omarchy"></category><category term="John Carmack"></category><category term="DHH"></category></entry><entry><title>Problems with the GitHub Default Remote Using SSH</title><link href="https://jentrialgo.github.io/problems-with-the-github-default-remote-using-ssh.html" rel="alternate"></link><published>2025-05-28T12:00:00+02:00</published><updated>2025-05-28T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-05-28:/problems-with-the-github-default-remote-using-ssh.html</id><content type="html">&lt;p&gt;Second time that I have this problem, so I thought I would write it down.&lt;/p&gt;
&lt;p&gt;When I create a new repository on GitHub, the default instructions to add the remote repository to my local git repository are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;git@github.com:my_username/new_repo_name.git
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;main
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem is that this assumes that I'm using the SSH protocol to connect to GitHub. However, I prefer using HTTPS for my connections. Therefore, I need to change the remote URL to use HTTPS instead of SSH. To do this, I can use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;set-url&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;https://github.com/my_username/new_repo_name.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To avoid this, the instructions to add the HTTPS connection directly should be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;remote&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;https://github.com/my_username/new_repo_name.git
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;-M&lt;span class="w"&gt; &lt;/span&gt;main
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="git, GitHub"></category><category term="git"></category><category term="GitHub"></category></entry><entry><title>Publishing PowerPoint presentations with animations as PDFs</title><link href="https://jentrialgo.github.io/publishing-powerpoint-presentations-with-animations-as-pdfs.html" rel="alternate"></link><published>2025-04-30T12:00:00+02:00</published><updated>2025-04-30T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-04-30:/publishing-powerpoint-presentations-with-animations-as-pdfs.html</id><summary type="html">&lt;p&gt;When I create PowerPoint presentations, I often use animations to explain complex processes. I design slides so the final state is clear on its own, but sometimes this isn’t feasible. When sharing these presentations as PDFs, animations are lost, making slides hard to understand.&lt;/p&gt;
&lt;p&gt;I’ve found a solution: &lt;a href="https://github.com/maxonthegit/PPspliT"&gt;PPSplit&lt;/a&gt;, a PowerPoint plug-in that exports presentations with animations as PDFs. PPSpit works by splitting animated slides into multiple PDF pages, each representing a step in the animation sequence. This preserves the flow and context of the presentation, ensuring viewers can follow the intended progression without needing the original PowerPoint file.&lt;/p&gt;
&lt;p&gt;To use PPSpit in Windows, install the plug-in from its &lt;a href="https://www.maxonthenet.altervista.org/ppsplit.php"&gt;web page&lt;/a&gt; and open your presentation in PowerPoint. PPsplit will add a new tab to split the slides. Notice that &lt;em&gt;this changes the file&lt;/em&gt;, so make a copy of the original presentation before using it, especially if you have auto-save enabled. After splitting, you can save the presentation as a PDF. The resulting PDF will have each animation step on a separate page, making …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I create PowerPoint presentations, I often use animations to explain complex processes. I design slides so the final state is clear on its own, but sometimes this isn’t feasible. When sharing these presentations as PDFs, animations are lost, making slides hard to understand.&lt;/p&gt;
&lt;p&gt;I’ve found a solution: &lt;a href="https://github.com/maxonthegit/PPspliT"&gt;PPSplit&lt;/a&gt;, a PowerPoint plug-in that exports presentations with animations as PDFs. PPSpit works by splitting animated slides into multiple PDF pages, each representing a step in the animation sequence. This preserves the flow and context of the presentation, ensuring viewers can follow the intended progression without needing the original PowerPoint file.&lt;/p&gt;
&lt;p&gt;To use PPSpit in Windows, install the plug-in from its &lt;a href="https://www.maxonthenet.altervista.org/ppsplit.php"&gt;web page&lt;/a&gt; and open your presentation in PowerPoint. PPsplit will add a new tab to split the slides. Notice that &lt;em&gt;this changes the file&lt;/em&gt;, so make a copy of the original presentation before using it, especially if you have auto-save enabled. After splitting, you can save the presentation as a PDF. The resulting PDF will have each animation step on a separate page, making it easy to follow along.&lt;/p&gt;</content><category term="PowerPoint, PDF"></category><category term="PowerPoint"></category><category term="PDF"></category></entry><entry><title>Exploring GitHub Repos with Cool Tools</title><link href="https://jentrialgo.github.io/exploring-github-repos-with-cool-tools.html" rel="alternate"></link><published>2025-04-29T16:45:00+02:00</published><updated>2025-04-29T16:45:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-04-29:/exploring-github-repos-with-cool-tools.html</id><summary type="html">&lt;p&gt;Recently, I’ve come across a few tools to understand GitHub repos better: &lt;a href="https://deepwiki.com/"&gt;DeepWiki&lt;/a&gt;, &lt;a href="https://www.gitpodcast.com/"&gt;GitPodcast&lt;/a&gt;, and &lt;a href="https://forgithub.com/"&gt;ForGitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;DeepWiki: Turning Repos into Interactive Documentation&lt;/h3&gt;
&lt;p&gt;DeepWiki, developed by Cognition Labs, automatically converts any GitHub repo into a comprehensive, wiki-style documentation with interactive visualizations. What I love most is its "in-depth research" feature—it provides insights that feel like they’re coming from a senior engineer, covering design concepts, best practices, and even optimization opportunities. You can check it out at &lt;a href="https://deepwiki.com/"&gt;DeepWiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an example, you can explore &lt;a href="https://deepwiki.com/asi-uniovi/simct/"&gt;DeepWiki for SimCT&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;GitPodcast: Listening to Code as a Story&lt;/h3&gt;
&lt;p&gt;GitPodcast converts any GitHub repository into an engaging podcast! Imagine listening to the evolution of a project, its commits, and its structure as a story while you’re on a walk or coding something else. It’s hosted by BandarLabs and available at &lt;a href="https://www.gitpodcast.com/"&gt;GitPodcast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is &lt;a href="https://www.gitpodcast.com/asi-uniovi/simct/"&gt;the podcast for SimCT&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;ForGitHub: Comparing Repos Side by Side&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://forgithub.com/"&gt;ForGitHub&lt;/a&gt; gives a list of cool tools and APIs that use the same URL structure as GitHub enabling you to use it by just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I’ve come across a few tools to understand GitHub repos better: &lt;a href="https://deepwiki.com/"&gt;DeepWiki&lt;/a&gt;, &lt;a href="https://www.gitpodcast.com/"&gt;GitPodcast&lt;/a&gt;, and &lt;a href="https://forgithub.com/"&gt;ForGitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;DeepWiki: Turning Repos into Interactive Documentation&lt;/h3&gt;
&lt;p&gt;DeepWiki, developed by Cognition Labs, automatically converts any GitHub repo into a comprehensive, wiki-style documentation with interactive visualizations. What I love most is its "in-depth research" feature—it provides insights that feel like they’re coming from a senior engineer, covering design concepts, best practices, and even optimization opportunities. You can check it out at &lt;a href="https://deepwiki.com/"&gt;DeepWiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As an example, you can explore &lt;a href="https://deepwiki.com/asi-uniovi/simct/"&gt;DeepWiki for SimCT&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;GitPodcast: Listening to Code as a Story&lt;/h3&gt;
&lt;p&gt;GitPodcast converts any GitHub repository into an engaging podcast! Imagine listening to the evolution of a project, its commits, and its structure as a story while you’re on a walk or coding something else. It’s hosted by BandarLabs and available at &lt;a href="https://www.gitpodcast.com/"&gt;GitPodcast&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is &lt;a href="https://www.gitpodcast.com/asi-uniovi/simct/"&gt;the podcast for SimCT&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;ForGitHub: Comparing Repos Side by Side&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://forgithub.com/"&gt;ForGitHub&lt;/a&gt; gives a list of cool tools and APIs that use the same URL structure as GitHub enabling you to use it by just changing your url, just like GitPostcast.&lt;/p&gt;</content><category term="github, tools, visualization, developer workflow"></category><category term="github"></category><category term="tools"></category><category term="visualization"></category><category term="developer workflow"></category><category term="deepwiki"></category><category term="gitpodcast"></category><category term="forgithub"></category></entry><entry><title>Visualizing Network Topologies</title><link href="https://jentrialgo.github.io/visualizing-network-topologies.html" rel="alternate"></link><published>2025-04-19T12:00:00+02:00</published><updated>2025-04-19T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-04-19:/visualizing-network-topologies.html</id><content type="html">&lt;p&gt;While preparing my classes on interconnection networks in computer systems, I wanted to better understand metrics related to ring topologies. To explore this, I created a simple JavaScript program to visualize a ring network, using “&lt;a href="https://en.wikipedia.org/wiki/Vibe_coding"&gt;vibe coding&lt;/a&gt;”—an approach where you let Artificial Intelligence (AI) generate the code for you. The result is this &lt;a href="https://jentrialgo.github.io/ring-network-visualization/"&gt;Ring Network Visualization&lt;/a&gt; (&lt;a href="https://github.com/jentrialgo/ring-network-visualization"&gt;GitHub repository&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Later, I came across several impressive visualizations built with Three.js (like &lt;a href="https://x.com/nasimuddin01/status/1899411762811965533"&gt;this&lt;/a&gt; and &lt;a href="https://x.com/renderfiction/status/1905998185962643767"&gt;this&lt;/a&gt;), and I wanted to give it a try. Using the same “vibe coding” approach, I developed this &lt;a href="https://jentrialgo.github.io/topo_visualizer/"&gt;Topology Visualizer&lt;/a&gt; (&lt;a href="https://github.com/jentrialgo/topo_visualizer"&gt;GitHub repository&lt;/a&gt;). It’s a simple tool that allows you to visualize different network topologies—such as ring, mesh, and hypercube—in 3D. You can change the number of nodes and observe how the topology evolves. Clicking on a node triggers a visual effect that shows light bolts connecting it to the farthest node, effectively highlighting the diameter of the topology.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Topology Visualizer Screenshot" src="https://raw.githubusercontent.com/jentrialgo/topo_visualizer/main/screenshot.png"&gt;&lt;/p&gt;</content><category term="network, topology, visualization, javascript, vibe coding"></category><category term="network"></category><category term="topology"></category><category term="visualization"></category><category term="javascript"></category><category term="vibe coding"></category></entry><entry><title>Updating to uv from pip</title><link href="https://jentrialgo.github.io/updating-to-uv-from-pip.html" rel="alternate"></link><published>2025-04-11T12:00:00+02:00</published><updated>2025-04-11T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-04-11:/updating-to-uv-from-pip.html</id><content type="html">&lt;p&gt;This is a short guide on how to upgrade a project from using &lt;code&gt;pip&lt;/code&gt; with a
&lt;code&gt;requirements.txt&lt;/code&gt; file to using Astral's &lt;code&gt;uv&lt;/code&gt;. It assumes that &lt;code&gt;uv&lt;/code&gt; is already installed
and that you have a project set up with a &lt;code&gt;requirements.txt&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Initialize uv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remove &lt;code&gt;hello.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;rm&lt;span class="w"&gt; &lt;/span&gt;hello.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Modify &lt;code&gt;project.toml&lt;/code&gt; to update the information about the project.&lt;/p&gt;
&lt;p&gt;Add the dependencies from &lt;code&gt;requirements.txt&lt;/code&gt; to the &lt;code&gt;project.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's it! You can now use &lt;code&gt;uv&lt;/code&gt; to manage your dependencies. You can run the project with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;your_script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can use uv sync to manually update the environment then activate it
before executing a command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;sync
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate
python&lt;span class="w"&gt; &lt;/span&gt;your_script.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To add new dependencies, you can use the &lt;code&gt;uv add&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;package_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To upgrade a package, you can use the &lt;code&gt;uv upgrade&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;lock&lt;span class="w"&gt; &lt;/span&gt;--upgrade-package&lt;span class="w"&gt; &lt;/span&gt;package_name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="uv, pip, python"></category><category term="uv"></category><category term="pip"></category><category term="python"></category></entry><entry><title>Connecting to a Jetson Nano with Ubuntu 18.04 Using VS Code</title><link href="https://jentrialgo.github.io/connecting-to-a-jetson-nano-with-ubuntu-1804-using-vs-code.html" rel="alternate"></link><published>2025-03-28T12:00:00+01:00</published><updated>2025-03-28T12:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-03-28:/connecting-to-a-jetson-nano-with-ubuntu-1804-using-vs-code.html</id><summary type="html">&lt;p&gt;If you're trying to connect remotely to an NVIDIA Jetson Nano running Ubuntu 18.04 with Visual Studio Code (VS Code), you might run into a compatibility issue due to recent changes in VS Code's remote server requirements.&lt;/p&gt;
&lt;p&gt;Starting from release &lt;strong&gt;1.99 (March 2025)&lt;/strong&gt;, VS Code’s prebuilt remote server is only compatible with Linux distributions using &lt;strong&gt;glibc 2.28 or later&lt;/strong&gt;. However, Ubuntu 18.04 ships with &lt;strong&gt;glibc 2.27&lt;/strong&gt;, making it incompatible with these newer releases.&lt;/p&gt;
&lt;h3&gt;Solution: Use an Older Version of VS Code (1.98.2)&lt;/h3&gt;
&lt;p&gt;To work around this limitation, you can use &lt;strong&gt;VS Code 1.98.2&lt;/strong&gt;, which is the last version compatible with Ubuntu 18.04. Here’s how to do it:&lt;/p&gt;
&lt;h3&gt;1. Download VS Code 1.98.2 (Portable Version)&lt;/h3&gt;
&lt;p&gt;Since later versions may not work, download the &lt;strong&gt;portable version&lt;/strong&gt; of VS Code 1.98.2 for your platform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows (Portable)&lt;/strong&gt;: &lt;a href="https://update.code.visualstudio.com/1.98.2/win32-x64-archive/stable"&gt;Download here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other platforms&lt;/strong&gt;: Follow the instructions in the &lt;a href="https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions"&gt;VS Code FAQ&lt;/a&gt; to find the appropriate link.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Extract and Run VS Code&lt;/h3&gt;
&lt;p&gt;If you downloaded …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're trying to connect remotely to an NVIDIA Jetson Nano running Ubuntu 18.04 with Visual Studio Code (VS Code), you might run into a compatibility issue due to recent changes in VS Code's remote server requirements.&lt;/p&gt;
&lt;p&gt;Starting from release &lt;strong&gt;1.99 (March 2025)&lt;/strong&gt;, VS Code’s prebuilt remote server is only compatible with Linux distributions using &lt;strong&gt;glibc 2.28 or later&lt;/strong&gt;. However, Ubuntu 18.04 ships with &lt;strong&gt;glibc 2.27&lt;/strong&gt;, making it incompatible with these newer releases.&lt;/p&gt;
&lt;h3&gt;Solution: Use an Older Version of VS Code (1.98.2)&lt;/h3&gt;
&lt;p&gt;To work around this limitation, you can use &lt;strong&gt;VS Code 1.98.2&lt;/strong&gt;, which is the last version compatible with Ubuntu 18.04. Here’s how to do it:&lt;/p&gt;
&lt;h3&gt;1. Download VS Code 1.98.2 (Portable Version)&lt;/h3&gt;
&lt;p&gt;Since later versions may not work, download the &lt;strong&gt;portable version&lt;/strong&gt; of VS Code 1.98.2 for your platform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows (Portable)&lt;/strong&gt;: &lt;a href="https://update.code.visualstudio.com/1.98.2/win32-x64-archive/stable"&gt;Download here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Other platforms&lt;/strong&gt;: Follow the instructions in the &lt;a href="https://code.visualstudio.com/docs/supporting/faq#_previous-release-versions"&gt;VS Code FAQ&lt;/a&gt; to find the appropriate link.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2. Extract and Run VS Code&lt;/h3&gt;
&lt;p&gt;If you downloaded the Windows portable version:
- Extract the archive to a location of your choice.
- Run &lt;code&gt;Code.exe&lt;/code&gt; from the extracted folder.&lt;/p&gt;
&lt;p&gt;For Linux/macOS:
- Extract the archive.
- Run &lt;code&gt;code&lt;/code&gt; from the extracted directory.&lt;/p&gt;
&lt;h3&gt;3. Install the Remote SSH Extension&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open VS Code.&lt;/li&gt;
&lt;li&gt;Go to the &lt;strong&gt;Extensions&lt;/strong&gt; marketplace (&lt;code&gt;Ctrl+Shift+X&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Search for &lt;strong&gt;Remote - SSH&lt;/strong&gt; and install it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;4. Configure SSH for Your Jetson Nano&lt;/h3&gt;
&lt;p&gt;Ensure that SSH is enabled on your Jetson Nano. If SSH is not installed, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;apt&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On your &lt;strong&gt;local machine&lt;/strong&gt;, configure the SSH connection:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open VS Code and press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;strong&gt;Remote-SSH: Open SSH Configuration File&lt;/strong&gt; and select it.&lt;/li&gt;
&lt;li&gt;Add an entry for your Jetson Nano (modify as needed):&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Host jetson-nano
       HostName &amp;lt;JETSON_IP&amp;gt;
       User &amp;lt;YOUR_USERNAME&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Save the file.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;5. Connect to the Jetson Nano&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;strong&gt;Remote-SSH: Connect to Host...&lt;/strong&gt; and select your Jetson Nano.&lt;/li&gt;
&lt;li&gt;If prompted, enter your SSH password or configure SSH keys for passwordless access.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once connected, VS Code will install the remote server version &lt;strong&gt;1.98.2&lt;/strong&gt;, which is compatible with Ubuntu 18.04.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;By using &lt;strong&gt;VS Code 1.98.2&lt;/strong&gt;, you can continue remote development on a Jetson Nano running Ubuntu 18.04 despite the recent glibc compatibility changes. If upgrading your OS is not an option, this method allows you to maintain a functional remote development workflow.&lt;/p&gt;</content><category term="nano, ubuntu, vscode"></category><category term="nano"></category><category term="ubuntu"></category><category term="vscode"></category></entry><entry><title>Using uv to run Python tools without installing them</title><link href="https://jentrialgo.github.io/using-uv-to-run-python-tools-without-installing-them.html" rel="alternate"></link><published>2025-01-23T12:00:00+01:00</published><updated>2025-01-23T12:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-01-23:/using-uv-to-run-python-tools-without-installing-them.html</id><content type="html">&lt;p&gt;I wanted to run a Python tool without installing it, or preparing a virtual environment
and all that. This is now very easy with &lt;a href="https://github.com/astral-sh/uv"&gt;uv&lt;/a&gt;, using
&lt;a href="https://docs.astral.sh/uv/guides/tools/"&gt;uvx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to run &lt;a href="https://github.com/microsoft/markitdown"&gt;markitdown&lt;/a&gt;, a tool to convert
various files to Markdown. I didn't want to install it, so I used &lt;code&gt;uvx&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uvx&lt;span class="w"&gt; &lt;/span&gt;markitdown&lt;span class="o"&gt;[&lt;/span&gt;docx&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file_to_convert.docx&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;output_file.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It downloads the tool and installs it in a temporary, isolated environment. In this
case, it also installs the &lt;code&gt;docx&lt;/code&gt; extra, so that markitdown can convert docx files.&lt;/p&gt;
&lt;p&gt;A tool can be installed with &lt;code&gt;uv tool install&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;tool&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;markitdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's very convenient.&lt;/p&gt;</content><category term="python, uv"></category><category term="python"></category><category term="uv"></category></entry><entry><title>Essential git cheat sheet for loners</title><link href="https://jentrialgo.github.io/essential-git-cheat-sheet-for-loners.html" rel="alternate"></link><published>2025-01-22T12:00:00+01:00</published><updated>2025-01-22T12:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-01-22:/essential-git-cheat-sheet-for-loners.html</id><summary type="html">&lt;p&gt;This are the basic commands to operate with git as a loner: no branches, no remotes, no
merges... Just the basic stuff.&lt;/p&gt;
&lt;p&gt;The minimum concepts you need to know are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git is a version control system. It allows you to store changes in your files. Don't
  mix it with GitHub, which is a platform to store your repositories.&lt;/li&gt;
&lt;li&gt;Working directory: the directory where you are working.&lt;/li&gt;
&lt;li&gt;Staging area: a place to store changes before committing them.&lt;/li&gt;
&lt;li&gt;Repository: the place where the changes are stored.&lt;/li&gt;
&lt;li&gt;Commit: a set of changes stored in the repository. They are identified by a hash. For
  example, &lt;code&gt;commit 1234567&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The basic workflow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make changes in the working directory.&lt;/li&gt;
&lt;li&gt;Add changes to the staging area.&lt;/li&gt;
&lt;li&gt;Commit changes to the repository.&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Conceptually: working directory -&amp;gt; staging area -&amp;gt; repository.&lt;/p&gt;
&lt;h1&gt;Configuration&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your Name&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Create a new repository&lt;/h1&gt;
&lt;p&gt;In the directory of your project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Add files to the repository&lt;/h1&gt;
&lt;p&gt;This adds all the changes in your current directory to the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This are the basic commands to operate with git as a loner: no branches, no remotes, no
merges... Just the basic stuff.&lt;/p&gt;
&lt;p&gt;The minimum concepts you need to know are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git is a version control system. It allows you to store changes in your files. Don't
  mix it with GitHub, which is a platform to store your repositories.&lt;/li&gt;
&lt;li&gt;Working directory: the directory where you are working.&lt;/li&gt;
&lt;li&gt;Staging area: a place to store changes before committing them.&lt;/li&gt;
&lt;li&gt;Repository: the place where the changes are stored.&lt;/li&gt;
&lt;li&gt;Commit: a set of changes stored in the repository. They are identified by a hash. For
  example, &lt;code&gt;commit 1234567&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The basic workflow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make changes in the working directory.&lt;/li&gt;
&lt;li&gt;Add changes to the staging area.&lt;/li&gt;
&lt;li&gt;Commit changes to the repository.&lt;/li&gt;
&lt;li&gt;Repeat.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Conceptually: working directory -&amp;gt; staging area -&amp;gt; repository.&lt;/p&gt;
&lt;h1&gt;Configuration&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your Name&amp;quot;&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;--global&lt;span class="w"&gt; &lt;/span&gt;user.email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;your_email@example.com&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Create a new repository&lt;/h1&gt;
&lt;p&gt;In the directory of your project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Add files to the repository&lt;/h1&gt;
&lt;p&gt;This adds all the changes in your current directory to the staging area.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you only want to add a specific file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Commit changes&lt;/h1&gt;
&lt;p&gt;This commits the changes in the staging area to the repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Your commit message&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Check the status of the repository&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Check the history of the repository&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Compare changes&lt;/h1&gt;
&lt;p&gt;Working directory vs repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Staging area vs repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;diff&lt;span class="w"&gt; &lt;/span&gt;--staged
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1&gt;Discard changes in the working directory&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;--&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Caution: This removes all uncommitted changes. For specific files, use &lt;code&gt;git checkout --
filename&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Discard changes in the staging area&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;reset
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Any other command you need, you can find it in the &lt;a href="https://git-scm.com/doc"&gt;official
documentation&lt;/a&gt; or, better, ask to an LLM like ChatGPT.&lt;/p&gt;
&lt;p&gt;Probably, the next step is to learn about remotes and, then, branches.&lt;/p&gt;</content><category term="git"></category><category term="git"></category></entry><entry><title>Running Ollama in a Linux Environment Without Root Privileges</title><link href="https://jentrialgo.github.io/running-ollama-in-a-linux-environment-without-root-privileges.html" rel="alternate"></link><published>2025-01-16T12:00:00+01:00</published><updated>2025-01-16T12:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2025-01-16:/running-ollama-in-a-linux-environment-without-root-privileges.html</id><summary type="html">&lt;h1&gt;Running Ollama in a Linux Environment Without Root Privileges&lt;/h1&gt;
&lt;p&gt;Running applications without root privileges is a common requirement for security and
compliance reasons, especially on shared systems or in environments where users don't have
administrative access. This guide will walk you through setting up &lt;strong&gt;ollama&lt;/strong&gt; on a Linux
system under these constraints, using some tools like &lt;code&gt;uv&lt;/code&gt; to manage Python dependencies
and configuring networking correctly. Maybe, this is not the easiest way and using Docker
could be simpler, but it's a good exercise to understand how to manage Python applications
without root privileges.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A functional Python environment.&lt;/li&gt;
&lt;li&gt;Basic command-line navigation skills.&lt;/li&gt;
&lt;li&gt;Network access for downloading necessary files and configuring network settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step-by-step Guide&lt;/h2&gt;
&lt;h3&gt;1. Install &lt;code&gt;uv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Firstly, we need a tool to handle Python applications efficiently without root privileges.
The tool I used is &lt;strong&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/strong&gt;. Here’s how you can install it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-LsSf&lt;span class="w"&gt; &lt;/span&gt;https://astral.sh/uv/install.sh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command downloads and executes the installation script for &lt;code&gt;uv&lt;/code&gt;. After installing,
verify its presence using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;which&lt;span class="w"&gt; &lt;/span&gt;uv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might need to restart …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Running Ollama in a Linux Environment Without Root Privileges&lt;/h1&gt;
&lt;p&gt;Running applications without root privileges is a common requirement for security and
compliance reasons, especially on shared systems or in environments where users don't have
administrative access. This guide will walk you through setting up &lt;strong&gt;ollama&lt;/strong&gt; on a Linux
system under these constraints, using some tools like &lt;code&gt;uv&lt;/code&gt; to manage Python dependencies
and configuring networking correctly. Maybe, this is not the easiest way and using Docker
could be simpler, but it's a good exercise to understand how to manage Python applications
without root privileges.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A functional Python environment.&lt;/li&gt;
&lt;li&gt;Basic command-line navigation skills.&lt;/li&gt;
&lt;li&gt;Network access for downloading necessary files and configuring network settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step-by-step Guide&lt;/h2&gt;
&lt;h3&gt;1. Install &lt;code&gt;uv&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Firstly, we need a tool to handle Python applications efficiently without root privileges.
The tool I used is &lt;strong&gt;&lt;code&gt;uv&lt;/code&gt;&lt;/strong&gt;. Here’s how you can install it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-LsSf&lt;span class="w"&gt; &lt;/span&gt;https://astral.sh/uv/install.sh&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This command downloads and executes the installation script for &lt;code&gt;uv&lt;/code&gt;. After installing,
verify its presence using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;which&lt;span class="w"&gt; &lt;/span&gt;uv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might need to restart your terminal session to update the PATH variable.&lt;/p&gt;
&lt;h3&gt;2. Download Ollama Release&lt;/h3&gt;
&lt;p&gt;Next, download the appropriate ollama release for Linux environments from their official
GitHub releases page. These commands will help you download the latest version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;repos&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ollama&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ollama&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;releases&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;oP&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;tag_name&amp;quot;: &amp;quot;\K(.*)(?=&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;LO&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://github.com/ollama/ollama/releases/download/${VERSION}/ollama-linux-amd64.tgz&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can manually download the release by visiting the GitHub releases page
and copying the link for the latest version. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-LO&lt;span class="w"&gt; &lt;/span&gt;https://github.com/ollama/ollama/releases/download/vX.Y.Z/ollama-linux-amd64.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Replace &lt;code&gt;vX.Y.Z&lt;/code&gt; with the actual version number. You can find the latest release on the
&lt;a href="https://github.com/ollama/ollama/releases"&gt;ollama GitHub releases page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extract it to a directory within your home folder or another location you have write
permissions for:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;~/ollama
tar&lt;span class="w"&gt; &lt;/span&gt;-xzf&lt;span class="w"&gt; &lt;/span&gt;ollama-linux-amd64.tgz&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;~/ollama
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;~/ollama
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;3. Run Ollama with Public IP&lt;/h3&gt;
&lt;p&gt;Ollama requires to be listening on a network interface that allows external connections. You can
start the ollama server using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;OLLAMA_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:11434&lt;span class="w"&gt; &lt;/span&gt;./ollama&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;4. Set Up Open Web UI&lt;/h3&gt;
&lt;p&gt;Using &lt;code&gt;uv&lt;/code&gt;, we can set up Open Web UI, which provides a web interface for ollama:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;UV_PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;python3.13&lt;span class="w"&gt; &lt;/span&gt;uv&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;open-webui-proy
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;open-webui-proy/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that we didn't call the project &lt;code&gt;open-webui&lt;/code&gt; directly, but &lt;code&gt;open-webui-proy&lt;/code&gt;. This
is because &lt;code&gt;uv&lt;/code&gt; will create a folder with the same name as the project, and we want to
avoid conflicts with the &lt;code&gt;open-webui&lt;/code&gt; folder created in the previous step.&lt;/p&gt;
&lt;p&gt;Also, we specify the Python version to use with &lt;code&gt;UV_PYTHON=python3.13&lt;/code&gt;. This is important
because a version lower than 3.11 will not work with &lt;code&gt;uv&lt;/code&gt; and &lt;code&gt;open-webui&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;5. Add and Run Open Web UI&lt;/h3&gt;
&lt;p&gt;After initializing the Open Web UI project, add it as a dependency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;open-webui
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you can start the server to access your ollama interface through a web browser:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;open-webui&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;6. Configure Network Settings in Open Web UI&lt;/h3&gt;
&lt;p&gt;By default, Open Web UI tries to connect to ollama running on &lt;code&gt;localhost&lt;/code&gt;. To change this
setting, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;code&gt;Admin Settings&lt;/code&gt; in Open WebUI.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;Connections &amp;gt; Ollama &amp;gt; Manage&lt;/code&gt; (click the wrench icon).&lt;/li&gt;
&lt;li&gt;Add a new connection for Ollama API with your public IP and port number.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;7. Updating Open Web UI&lt;/h3&gt;
&lt;p&gt;To update Open Web UI, you can use the following command from the &lt;code&gt;open-webui-proy&lt;/code&gt;
directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uv&lt;span class="w"&gt; &lt;/span&gt;sync&lt;span class="w"&gt; &lt;/span&gt;--upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;By following these steps, you can successfully set up ollama on a Linux system without
root privileges. This approach not only enhances security but also provides flexibility
across various environments.&lt;/p&gt;</content><category term="ollama, open-webui, AI, LLM"></category><category term="ollama"></category><category term="open-webui"></category><category term="AI"></category><category term="LLM"></category></entry><entry><title>A LaTeX makefile: latexmk</title><link href="https://jentrialgo.github.io/a-latex-makefile-latexmk.html" rel="alternate"></link><published>2024-11-07T12:00:00+01:00</published><updated>2024-11-07T12:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2024-11-07:/a-latex-makefile-latexmk.html</id><content type="html">&lt;p&gt;I have been using LaTeX for a while now and I have always been annoyed by the fact that I
have to run the &lt;code&gt;pdflatex&lt;/code&gt; command multiple times to get the references and the table of
contents right. Today, I colleague of mine told me about the &lt;code&gt;latexmk&lt;/code&gt; command. It is a
tool that takes care of all the dependencies and runs the necessary commands to generate
the PDF file.&lt;/p&gt;
&lt;p&gt;You can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latexmk&lt;span class="w"&gt; &lt;/span&gt;-pdf&lt;span class="w"&gt; &lt;/span&gt;yourfile.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it will take care of everything. It will run &lt;code&gt;pdflatex&lt;/code&gt; multiple times if necessary,
it will run &lt;code&gt;bibtex&lt;/code&gt; (or 'biber', as in my case) if you have a bibliography, and it will
generate the PDF file.&lt;/p&gt;</content><category term="LaTeX"></category><category term="LaTeX"></category><category term="makefile"></category></entry><entry><title>Profiling with nvprof</title><link href="https://jentrialgo.github.io/profiling-with-nvprof.html" rel="alternate"></link><published>2024-04-19T12:00:00+02:00</published><updated>2024-04-19T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2024-04-19:/profiling-with-nvprof.html</id><summary type="html">&lt;p&gt;I'm working on a Jetson Nano and I want to profile my code. Nvidia provides several tools,
being Nsight Compute the most powerful one. However, it cannot be run on the Jetson Nano,
so I have resorted to using &lt;code&gt;nvprof&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nvprof&lt;/code&gt; is a command-line profiler that can be used to profile CUDA applications. It is
included in the CUDA Toolkit, so you should have it installed if you have CUDA installed.
However, you need to be root to run it. As root, I don't have the CUDA environment set up,
so I need use the full path. These are two commands that I've found useful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/local/cuda/bin/nvprof&lt;span class="w"&gt; &lt;/span&gt;--print-gpu-trace&lt;span class="w"&gt; &lt;/span&gt;./my_program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows the GPU trace of the program. It is useful to see how the GPU is being used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/local/cuda/bin/nvprof&lt;span class="w"&gt; &lt;/span&gt;--metrics&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;./my_program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows all the metrics that &lt;code&gt;nvprof&lt;/code&gt; can measure. It is useful to see how the program
is using the GPU.&lt;/p&gt;
&lt;p&gt;In addition, you can use the &lt;code&gt;--log-file&lt;/code&gt; option to save the output to a file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm working on a Jetson Nano and I want to profile my code. Nvidia provides several tools,
being Nsight Compute the most powerful one. However, it cannot be run on the Jetson Nano,
so I have resorted to using &lt;code&gt;nvprof&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nvprof&lt;/code&gt; is a command-line profiler that can be used to profile CUDA applications. It is
included in the CUDA Toolkit, so you should have it installed if you have CUDA installed.
However, you need to be root to run it. As root, I don't have the CUDA environment set up,
so I need use the full path. These are two commands that I've found useful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/local/cuda/bin/nvprof&lt;span class="w"&gt; &lt;/span&gt;--print-gpu-trace&lt;span class="w"&gt; &lt;/span&gt;./my_program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows the GPU trace of the program. It is useful to see how the GPU is being used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/local/cuda/bin/nvprof&lt;span class="w"&gt; &lt;/span&gt;--metrics&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;./my_program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows all the metrics that &lt;code&gt;nvprof&lt;/code&gt; can measure. It is useful to see how the program
is using the GPU.&lt;/p&gt;
&lt;p&gt;In addition, you can use the &lt;code&gt;--log-file&lt;/code&gt; option to save the output to a file.&lt;/p&gt;</content><category term="Nvidia, GPU, Profiling, Jetson"></category><category term="Nvidia"></category><category term="GPU"></category><category term="Profiling"></category><category term="Jetson"></category></entry><entry><title>GPU sharing</title><link href="https://jentrialgo.github.io/gpu-sharing.html" rel="alternate"></link><published>2024-04-05T10:00:00+02:00</published><updated>2024-04-05T10:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2024-04-05:/gpu-sharing.html</id><content type="html">&lt;p&gt;I've found this &lt;a href="https://developer.nvidia.com/blog/improving-gpu-utilization-in-kubernetes/"&gt;interesting post from 2022 by Nvidia about GPU sharing in
Kubernetes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main GPU sharing technologies can be summarized in this table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Technology&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;MicroArchitecture&lt;/th&gt;
&lt;th&gt;CUDA Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CUDA Streams&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Allows concurrent operations within a single CUDA context using software abstraction.&lt;/td&gt;
&lt;td&gt;Pascal and later&lt;/td&gt;
&lt;td&gt;Not specified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Time-Slicing&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Oversubscription strategy using the GPU's time-slicing scheduler.&lt;/td&gt;
&lt;td&gt;Pascal and later&lt;/td&gt;
&lt;td&gt;11.1 (R455+ drivers)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;CUDA MPS&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;MPS (Multi-Process Service) enables concurrent processing of CUDA kernels from different processes, typically MPI jobs.&lt;/td&gt;
&lt;td&gt;Not specified&lt;/td&gt;
&lt;td&gt;11.4+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;MIG&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;MIG (Multi-Instance GPU) is a secure partitioning of GPUs into separate instances for dedicated resources.&lt;/td&gt;
&lt;td&gt;Ampere Architecture&lt;/td&gt;
&lt;td&gt;Not specified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;NVIDIA vGPU&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Provides VMs with simultaneous, direct access to a single physical GPU.&lt;/td&gt;
&lt;td&gt;Compatible with MIG-supported GPUs&lt;/td&gt;
&lt;td&gt;Not specified&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The post also explains how GPUs are advertised as schedulable resources in Kubernetes with
the device plugin framework, but it is a integer-based resource, so it does not allow for
oversuscription. They describe a way of achieving this with time-slicing APIs.&lt;/p&gt;</content><category term="Nvidia, GPU, Kubernetes"></category><category term="Nvidia"></category><category term="GPU"></category><category term="Kubernetes"></category></entry><entry><title>How GPGPU came to exist</title><link href="https://jentrialgo.github.io/how-gpgpu-came-to-exist.html" rel="alternate"></link><published>2024-03-05T10:00:00+01:00</published><updated>2024-03-05T10:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2024-03-05:/how-gpgpu-came-to-exist.html</id><summary type="html">&lt;p&gt;I've been reading about the history of GPU computing in chapter 2 of "Massively Parallel
Processors" by David B. Kirk and Wen-mei W. Hwu. It's a fascinating story of how the GPU
came to be used for general-purpose computing.&lt;/p&gt;
&lt;p&gt;The story begins in the 1990s, when the first consumer 3D graphics cards were being
developed. These cards were designed to accelerate the rendering of 3D graphics for video
games. They were able to do this by offloading the rendering work from the CPU to the GPU,
which was specifically designed for this task.&lt;/p&gt;
&lt;p&gt;The first GPUs were fixed-function, meaning that they could only perform a limited set of
operations. However, as the demand for more realistic and complex graphics grew, the
capabilities of the GPU were expanded. This led to the development of programmable
shaders, which allowed developers to write custom code to control the rendering process.
In the beginning, these shaders were still limited to graphics-related tasks and there
were different kinds, such as vertex shaders and pixel shaders.&lt;/p&gt;
&lt;p&gt;One of the questions I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been reading about the history of GPU computing in chapter 2 of "Massively Parallel
Processors" by David B. Kirk and Wen-mei W. Hwu. It's a fascinating story of how the GPU
came to be used for general-purpose computing.&lt;/p&gt;
&lt;p&gt;The story begins in the 1990s, when the first consumer 3D graphics cards were being
developed. These cards were designed to accelerate the rendering of 3D graphics for video
games. They were able to do this by offloading the rendering work from the CPU to the GPU,
which was specifically designed for this task.&lt;/p&gt;
&lt;p&gt;The first GPUs were fixed-function, meaning that they could only perform a limited set of
operations. However, as the demand for more realistic and complex graphics grew, the
capabilities of the GPU were expanded. This led to the development of programmable
shaders, which allowed developers to write custom code to control the rendering process.
In the beginning, these shaders were still limited to graphics-related tasks and there
were different kinds, such as vertex shaders and pixel shaders.&lt;/p&gt;
&lt;p&gt;One of the questions I had when I read about CUDA cores, was this: are they independent of
the pixel and vertex shaders? Well, what happened was that GPUs evolved to have an array a
processing cores that could be used as pixel or vertex shaders. Then, the idea of using
these cores for general-purpose computing started to emerge. This was the beginning of
GPGPU. So the answer to my question is that CUDA cores are the same as pixel and vertex
shaders, but when those cores are used for general-purpose computing instead of shaders.&lt;/p&gt;
&lt;p&gt;When the idea of using GPUs for general-purpose was proposed, one of the limitations was
that the memory addressing was very limited. The first GPUs were designed to work with
textures and frame buffers, which have a very specific memory access pattern. In
particular, pixel shaders could not access memory randomly. This was a major limitation
for general-purpose computing, which requires random access to memory. When NVIDIA
introduced random load and store instructions in the Tesla architecture, it was a major
step forward for GPGPU.&lt;/p&gt;</content><category term="GPGPU, CUDA, Nvidia, GPU"></category><category term="GPGPU"></category><category term="CUDA"></category><category term="Nvidia"></category><category term="GPU"></category></entry><entry><title>Llamafile: the easiest way to try LLMs locally</title><link href="https://jentrialgo.github.io/llamafile-the-easiest-way-to-try-llms-locally.html" rel="alternate"></link><published>2024-01-01T19:00:00+01:00</published><updated>2024-01-01T19:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2024-01-01:/llamafile-the-easiest-way-to-try-llms-locally.html</id><content type="html">&lt;p&gt;From my previous post about &lt;a href="https://jentrialgo.github.io/projects-to-test-ai-chat-bots-locally.html#projects-to-test-ai-chat-bots-locally"&gt;projects to test AI chat bots
locally&lt;/a&gt;,
the field has not been standing still.&lt;/p&gt;
&lt;p&gt;I've found that the easiest way to try LLMs locally is to use
&lt;a href="https://github.com/Mozilla-Ocho/llamafile"&gt;llamafile&lt;/a&gt;: download a file, run it
 and that's it.&lt;/p&gt;
&lt;p&gt;I've also tried &lt;a href="https://lmstudio.ai/"&gt;LM studio&lt;/a&gt;, which is more powerful, but
it's also more complicated to use.&lt;/p&gt;</content><category term="AI, LLM"></category><category term="AI"></category><category term="LLM"></category></entry><entry><title>Uninstalling Windows Apps that seem not to be installed</title><link href="https://jentrialgo.github.io/uninstalling-windows-apps-that-seem-not-to-be-installed.html" rel="alternate"></link><published>2024-01-01T14:00:00+01:00</published><updated>2024-01-01T14:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2024-01-01:/uninstalling-windows-apps-that-seem-not-to-be-installed.html</id><content type="html">&lt;p&gt;I found with &lt;a href="https://diskanalyzer.com/"&gt;WizTree&lt;/a&gt; that there are some apps in
&lt;code&gt;C:\Program Files\WindowsApps&lt;/code&gt; that seem not to be installed for my user, and
I'm the only user on my computer. Examples are games like Candy Crush and Disney
Magic Kingdoms. I found a solution to uninstall them in the &lt;a href="https://answers.microsoft.com/en-us/windows/forum/all/unnecessary-apps-in-cprogram-fileswindowsapps/43f4552a-0445-4878-9ce3-8b7a4f45fe6a?page=2"&gt;following
thread&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, you have to start PowerShell as administrator and run the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;Get-AppxPackage&lt;/span&gt; &lt;span class="n"&gt;-allusers&lt;/span&gt;  &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;disney&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Select &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PackageFullName&lt;/span&gt;
&lt;span class="nb"&gt;Get-AppxPackage&lt;/span&gt; &lt;span class="n"&gt;-allusers&lt;/span&gt;  &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;disney&lt;/span&gt;&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;Remove-AppxPackage&lt;/span&gt; &lt;span class="n"&gt;-allusers&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first command lists all apps that contain the string &lt;code&gt;disney&lt;/code&gt; in their name.
The second command removes all apps that contain the string &lt;code&gt;disney&lt;/code&gt; in their
name. You can also use &lt;code&gt;*candy*&lt;/code&gt; to remove Candy Crush and so on.&lt;/p&gt;</content><category term="Windows"></category><category term="Windows"></category></entry><entry><title>Serving JavaScript with Python's http.server</title><link href="https://jentrialgo.github.io/serving-javascript-with-pythons-httpserver.html" rel="alternate"></link><published>2023-07-19T14:00:00+02:00</published><updated>2023-07-19T14:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-07-19:/serving-javascript-with-pythons-httpserver.html</id><content type="html">&lt;p&gt;I was trying to serve a JavaScript file with Python's http.server module, but I was getting
this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//localhost:9876/main.js” was blocked because of a disallowed MIME type (“text/plain”).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I saw in &lt;a href="https://stackoverflow.com/a/63167571/936580"&gt;this StackOverflow answer&lt;/a&gt; that I
needed to change the MIME type for JavaScript files. I'm using Windows, so I checked the
key &lt;code&gt;HKEY_CLASSES_ROOT\.js&lt;/code&gt; in RegEdit, and I found that it had this value:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;(Default)     JSFile
ContentType   text/plain
PerceivedType text
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I changed the &lt;code&gt;ContentType&lt;/code&gt; to &lt;code&gt;application/javascript&lt;/code&gt;, and now my JavaScript files are
served with the correct MIME type.&lt;/p&gt;
&lt;p&gt;I'm not sure why the MIME type was set to &lt;code&gt;text/plain&lt;/code&gt; in the first place. I'm guessing
that it was set by a program that I installed, but I don't know which one. I'm also not
sure if changing the MIME type will cause any problems with other programs.&lt;/p&gt;</content><category term="Python, JavaScript, Web"></category><category term="Python"></category><category term="JavaScript"></category><category term="Web"></category></entry><entry><title>Pylance and mypy cannot find editable local imports</title><link href="https://jentrialgo.github.io/pylance-and-mypy-cannot-find-editable-local-imports.html" rel="alternate"></link><published>2023-06-01T14:00:00+02:00</published><updated>2023-06-01T14:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-06-01:/pylance-and-mypy-cannot-find-editable-local-imports.html</id><content type="html">&lt;p&gt;The other day, I wrote &lt;a href="https://jentrialgo.github.io/pylance-cannot-find-editable-local-import.html"&gt;a post&lt;/a&gt;
about how I fixed a problem with Pylance not finding a local import. It worked, but now
mypy was complaining about the same import.&lt;/p&gt;
&lt;p&gt;The solution was installing the package in compat mode with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--config-settings&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;editable_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;compat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Pylance, Mypy, Python"></category><category term="Pylance"></category><category term="Mypy"></category><category term="Python"></category></entry><entry><title>Reading units from a pickle file with Pint</title><link href="https://jentrialgo.github.io/reading-units-from-a-pickle-file-with-pint.html" rel="alternate"></link><published>2023-05-30T12:00:00+02:00</published><updated>2023-05-30T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-05-30:/reading-units-from-a-pickle-file-with-pint.html</id><content type="html">&lt;p&gt;I have a Python package called cloudmodel that uses Pint to define units and adds some to
the default registry. When I read a pickle file that use these units, I get an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nl"&gt;UndefinedUnitError:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;usd&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;defined&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;registry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The way to fix it is to set the application registry to the one used by cloudmodel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudmodel.unified.units&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ureg&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_application_registry&lt;/span&gt;

&lt;span class="n"&gt;set_application_registry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ureg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Pylance, Python, Pint"></category><category term="Pylance"></category><category term="Python"></category><category term="Pint"></category></entry><entry><title>Pylance cannot find editable local import</title><link href="https://jentrialgo.github.io/pylance-cannot-find-editable-local-import.html" rel="alternate"></link><published>2023-05-27T08:00:00+02:00</published><updated>2023-05-27T08:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-05-27:/pylance-cannot-find-editable-local-import.html</id><content type="html">&lt;p&gt;I had a problem with Pylance not finding a local import. I had installed the package in
editable mode with &lt;code&gt;pip install -e .&lt;/code&gt; and it was working fine in the terminal, but Pylance
was not able to find it.&lt;/p&gt;
&lt;p&gt;The solution was installing the package in strict mode with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-e&lt;span class="w"&gt; &lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;--config-settings&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;editable_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;strict
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I got there from &lt;a href="https://github.com/microsoft/pylance-release/blob/main/TROUBLESHOOTING.md#editable-install-modules-not-found"&gt;this troubleshooting
page&lt;/a&gt;
and &lt;a href="https://setuptools.pypa.io/en/latest/userguide/development_mode.html#strict-editable-installs"&gt;this
explanation&lt;/a&gt;
in the Setuptools documentation.&lt;/p&gt;</content><category term="Pylance, Python"></category><category term="Pylance"></category><category term="Python"></category></entry><entry><title>Click removal in audio files with Python</title><link href="https://jentrialgo.github.io/click-removal-in-audio-files-with-python.html" rel="alternate"></link><published>2023-05-23T08:00:00+02:00</published><updated>2023-05-23T08:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-05-23:/click-removal-in-audio-files-with-python.html</id><summary type="html">&lt;p&gt;A friend of mine had an audio file with many clicks in it. He asked me if I
could remove them. I tried with the Audacity click removal tool, but it didn't
work: it removed the clicks, but created a lot of artifacts in the audio, so I
thought it would be a nice challenge to try to do it with Python.&lt;/p&gt;
&lt;p&gt;The waveform looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Waveform with clicks" src="images/2023-05-23-waveform.png"&gt;&lt;/p&gt;
&lt;p&gt;I did it using the &lt;a href="https://github.com/jiaaro/pydub"&gt;pydub&lt;/a&gt; package. The basic
idea is detecting the clicks and replacing them with the previous sample. I
used two different criteria to detect the clicks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the average of the previous samples is below a threshold and the current
  sample is above another threshold.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the difference between the previous sample and the current one is above a
  threshold.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is not very clean, but it worked. I had to play with the thresholds
and the width of the samples to get the best results. I also had to play with
the width of the clicks to avoid removing too much audio …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A friend of mine had an audio file with many clicks in it. He asked me if I
could remove them. I tried with the Audacity click removal tool, but it didn't
work: it removed the clicks, but created a lot of artifacts in the audio, so I
thought it would be a nice challenge to try to do it with Python.&lt;/p&gt;
&lt;p&gt;The waveform looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Waveform with clicks" src="images/2023-05-23-waveform.png"&gt;&lt;/p&gt;
&lt;p&gt;I did it using the &lt;a href="https://github.com/jiaaro/pydub"&gt;pydub&lt;/a&gt; package. The basic
idea is detecting the clicks and replacing them with the previous sample. I
used two different criteria to detect the clicks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the average of the previous samples is below a threshold and the current
  sample is above another threshold.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the difference between the previous sample and the current one is above a
  threshold.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code is not very clean, but it worked. I had to play with the thresholds
and the width of the samples to get the best results. I also had to play with
the width of the clicks to avoid removing too much audio.&lt;/p&gt;
&lt;p&gt;The result was pretty good. The waveform looked like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Waveform without clicks" src="images/2023-05-23-waveform-declicked.png"&gt;&lt;/p&gt;
&lt;p&gt;And the audio sounded much better. It was not perfect, but it was good enough.&lt;/p&gt;
&lt;p&gt;The code is below. The audio file is not included.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydub&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AudioSegment&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich.progress&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt;

&lt;span class="c1"&gt;# Read file&lt;/span&gt;
&lt;span class="n"&gt;FILE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;original&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AudioSegment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.wav&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wav&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;big_avg_diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;avg&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;sample&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;


&lt;span class="c1"&gt;# Get samples&lt;/span&gt;
&lt;span class="n"&gt;samples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_array_of_samples&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Declick&lt;/span&gt;
&lt;span class="n"&gt;num_clicks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;max_click_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;threshold_avg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;span class="n"&gt;threshold_abs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;18000&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;big_avg_diff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;threshold_avg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold_abs&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Found click &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_clicks&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;num_clicks&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;click_width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold_abs&lt;/span&gt;
            &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;click_width&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max_click_width&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;click_width&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; (width: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;click_width&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Found &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_clicks&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; clicks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Save new audio from samples&lt;/span&gt;
&lt;span class="n"&gt;new_audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;samples&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;new_audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILE_NAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_declicked.wav&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;wav&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Audio, Python"></category><category term="Audio"></category><category term="Python"></category></entry><entry><title>Computing the MASE for historical_forecasts in darts</title><link href="https://jentrialgo.github.io/computing-the-mase-for-historical_forecasts-in-darts.html" rel="alternate"></link><published>2023-05-11T14:00:00+02:00</published><updated>2023-05-11T14:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-05-11:/computing-the-mase-for-historical_forecasts-in-darts.html</id><content type="html">&lt;p&gt;I haven't found any example online on how to compute the MASE (Mean Absolute
Scaled Error) for historical forecasts in
&lt;a href="https://unit8co.github.io/darts/"&gt;darts&lt;/a&gt;, so I thought I'd share this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;darts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TimeSeries&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;darts.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NaiveSeasonal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;darts.metrics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mase&lt;/span&gt;

&lt;span class="n"&gt;my_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;47&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;my_np&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_ts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSeries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_np&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NaiveSeasonal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;my_forecast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;historical_forecasts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;series&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forecast_horizon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_mase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_series&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_ts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pred_series&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_forecast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;insample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;my_ts&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_mase: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;my_mase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_ts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;original&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_forecast&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;historical_forecasts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that the &lt;code&gt;insample&lt;/code&gt; parameter is set to the original time series up to
the start of the historical forecast.&lt;/p&gt;</content><category term="Time series prediction, darts"></category><category term="Time series prediction"></category><category term="darts"></category></entry><entry><title>Projects to test AI chat bots locally</title><link href="https://jentrialgo.github.io/projects-to-test-ai-chat-bots-locally.html" rel="alternate"></link><published>2023-05-02T14:00:00+02:00</published><updated>2023-05-02T14:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-05-02:/projects-to-test-ai-chat-bots-locally.html</id><summary type="html">&lt;p&gt;Many people is interested in trying AI (Artificial Intelligence) chat bots
locally, but they don't know how to start. These are some projects that I've
found that can be used to test different LLMs (Language Learning Models) and
chat bots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/oobabooga/text-generation-webui"&gt;Text generation web UI&lt;/a&gt;.
  It tries to be the
  &lt;a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui"&gt;AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;
  of text generation. Based on Gradio, it provides a web interface to test
  different LLMs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nsarrazin/serge"&gt;Serge&lt;/a&gt;. It's an interface based on
  Svelte as web framework and llama.cpp for running mmodels. It's dockerized.
  It also provides an API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nat/openplayground"&gt;openplayground&lt;/a&gt;. Works with local
  models and remote APIs. Can be installed as a Python package or run with
  Docker. It's implemented as a Flask application with a React frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Capsize-Games/chatai"&gt;ChatAI&lt;/a&gt;. It is a desktop application
  for Windows and Ubuntu developed in Python with PyQt. It uses a Google T5-Flan
  model and it is based on &lt;a href="https://github.com/Capsize-Games/airunner"&gt;A. I.
  Runner&lt;/a&gt;, a framework to run AI
  models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hpcaitech/ColossalAI"&gt;ColossalChat&lt;/a&gt;. ColossalAI provides a
  set of tools to develop deep learning models, and it includes ColossalChat,
  which is a chat bot based …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Many people is interested in trying AI (Artificial Intelligence) chat bots
locally, but they don't know how to start. These are some projects that I've
found that can be used to test different LLMs (Language Learning Models) and
chat bots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/oobabooga/text-generation-webui"&gt;Text generation web UI&lt;/a&gt;.
  It tries to be the
  &lt;a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui"&gt;AUTOMATIC1111/stable-diffusion-webui&lt;/a&gt;
  of text generation. Based on Gradio, it provides a web interface to test
  different LLMs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nsarrazin/serge"&gt;Serge&lt;/a&gt;. It's an interface based on
  Svelte as web framework and llama.cpp for running mmodels. It's dockerized.
  It also provides an API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/nat/openplayground"&gt;openplayground&lt;/a&gt;. Works with local
  models and remote APIs. Can be installed as a Python package or run with
  Docker. It's implemented as a Flask application with a React frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/Capsize-Games/chatai"&gt;ChatAI&lt;/a&gt;. It is a desktop application
  for Windows and Ubuntu developed in Python with PyQt. It uses a Google T5-Flan
  model and it is based on &lt;a href="https://github.com/Capsize-Games/airunner"&gt;A. I.
  Runner&lt;/a&gt;, a framework to run AI
  models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/hpcaitech/ColossalAI"&gt;ColossalChat&lt;/a&gt;. ColossalAI provides a
  set of tools to develop deep learning models, and it includes ColossalChat,
  which is a chat bot based on LLaMA models, working for English and Chinese.
  They say in &lt;a href="https://medium.com/pytorch/colossalchat-an-open-source-solution-for-cloning-chatgpt-with-a-complete-rlhf-pipeline-5edf08fb538b"&gt;this
  article&lt;/a&gt;
  it's the first open source solution with a whole RLHF (Reinforcement Learning
  with Human Feedback) pipeline to improve the chat bot, in the same way as
  ChatGPT. It looks like the focus is on providing tools to speed up training
  and inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/go-skynet/LocalAI"&gt;LocalAI&lt;/a&gt;. Based on
  &lt;a href="https://github.com/ggerganov/llama.cpp"&gt;llama.cpp&lt;/a&gt;,
  &lt;a href="https://github.com/nomic-ai/gpt4all"&gt;gpt4all&lt;/a&gt; and
  &lt;a href="https://github.com/ggerganov/ggml"&gt;ggml&lt;/a&gt;, it provides a local API to LLMs.
  Basically, it uses docker to deploy a web server developed in Go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/mlc-ai/mlc-llm"&gt;MLC LLM&lt;/a&gt;. It's a project to deploy LLMs on
  everyone's devices. It compiles the LLMs using &lt;a href="https://github.com/apache/tvm/tree/unity"&gt;Apache TVM
  Unity&lt;/a&gt;. They even have a project to
  deploy LLMs on web browsers, &lt;a href="https://github.com/mlc-ai/web-llm/tree/main"&gt;Web
  LLM&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="AI, chat bots, Python, LLM"></category><category term="AI"></category><category term="chat bots"></category><category term="Python"></category><category term="LLM"></category><category term="ChatAI"></category><category term="ColossalChat"></category><category term="LocalAI"></category><category term="Text generation web UI"></category><category term="MLC LLM"></category></entry><entry><title>Visual Studio Code unable to connect</title><link href="https://jentrialgo.github.io/visual-studio-code-unable-to-connect.html" rel="alternate"></link><published>2023-04-21T12:00:00+02:00</published><updated>2023-04-21T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2023-04-21:/visual-studio-code-unable-to-connect.html</id><content type="html">&lt;p&gt;Some times, I get this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Unable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;VS&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;server&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;.
&lt;span class="nv"&gt;Error&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ENOENT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I always have to search for the solution, so I decided to write it down here.
From &lt;a href="https://github.com/microsoft/vscode-remote-release/issues/6997"&gt;this
issue&lt;/a&gt;, I found
that running this solves the problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VSCODE_IPC_HOOK_CLI=$(lsof | grep $USER | grep vscode-ipc | awk &amp;#39;{print $(NF-1)}&amp;#39; | head -n 1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Visual Studio Code"></category><category term="Visual Studio Code"></category><category term="VS Code"></category></entry><entry><title>Metrics per stage in k6</title><link href="https://jentrialgo.github.io/metrics-per-stage-in-k6.html" rel="alternate"></link><published>2022-11-25T18:00:00+01:00</published><updated>2022-11-25T18:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2022-11-25:/metrics-per-stage-in-k6.html</id><summary type="html">&lt;p&gt;If you want to have custom metrics per each stage in an executor, you have to
tag the stages (with &lt;code&gt;tagWithCurrentStageIndex()&lt;/code&gt;) and add bogus thresholds for
each metric that you want with the tag &lt;code&gt;stage:i&lt;/code&gt; (being &lt;code&gt;i&lt;/code&gt; the number of each
stage). The bogus threshold has to be different for gauges (&lt;code&gt;max&amp;gt;0&lt;/code&gt;) and rates
(&lt;code&gt;rate&amp;gt;=0&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This example file shows how to do it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k6/http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tagWithCurrentStageIndex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://jslib.k6.io/k6-utils/1.3.0/index.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10s&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10s&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;scenarios&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ramping-arrival-rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;timeUnit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;preAllocatedVUs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;maxVUs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Uncomment the next line if you want the count statistic&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// summaryTrendStats: [&amp;#39;avg&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;med&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;p(90)&amp;#39;, &amp;#39;p(95)&amp;#39;, &amp;#39;p(99)&amp;#39;, &amp;#39;count&amp;#39;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Intentionally empty. We&amp;#39;ll programatically define our bogus&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// thresholds (to generate the sub-metrics) below. In your real-world&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// load test, you can add any real threshoulds you want here.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addThreshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// &amp;#39;max&amp;gt;=0&amp;#39; is a …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;If you want to have custom metrics per each stage in an executor, you have to
tag the stages (with &lt;code&gt;tagWithCurrentStageIndex()&lt;/code&gt;) and add bogus thresholds for
each metric that you want with the tag &lt;code&gt;stage:i&lt;/code&gt; (being &lt;code&gt;i&lt;/code&gt; the number of each
stage). The bogus threshold has to be different for gauges (&lt;code&gt;max&amp;gt;0&lt;/code&gt;) and rates
(&lt;code&gt;rate&amp;gt;=0&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;This example file shows how to do it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k6/http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tagWithCurrentStageIndex&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://jslib.k6.io/k6-utils/1.3.0/index.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10s&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10s&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;scenarios&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ramping-arrival-rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;timeUnit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;preAllocatedVUs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;maxVUs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// Uncomment the next line if you want the count statistic&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// summaryTrendStats: [&amp;#39;avg&amp;#39;, &amp;#39;min&amp;#39;, &amp;#39;med&amp;#39;, &amp;#39;max&amp;#39;, &amp;#39;p(90)&amp;#39;, &amp;#39;p(95)&amp;#39;, &amp;#39;p(99)&amp;#39;, &amp;#39;count&amp;#39;],&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Intentionally empty. We&amp;#39;ll programatically define our bogus&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// thresholds (to generate the sub-metrics) below. In your real-world&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// load test, you can add any real threshoulds you want here.&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addThreshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// &amp;#39;max&amp;gt;=0&amp;#39; is a bogus condition that will always be fulfilled&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;thresholdName&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// This adds per stage metrics for http_req_duration (a gauge)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;addThreshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`http_req_duration{stage:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max&amp;gt;=0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// This adds per stage metrics for iterations (a rate)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;addThreshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sb"&gt;`iterations{stage:&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;}`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rate&amp;gt;=0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;tagWithCurrentStageIndex&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://test.k6.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The idea has been taken from &lt;a href="https://community.k6.io/t/multiple-scenarios-metrics-per-each/1314/3"&gt;this post about metrics per
scenario&lt;/a&gt;.&lt;/p&gt;</content><category term="k6"></category><category term="k6"></category></entry><entry><title>Installing Tensorflow Serving in Amazon EC2 Linux</title><link href="https://jentrialgo.github.io/installing-tensorflow-serving-in-amazon-ec2-linux.html" rel="alternate"></link><published>2022-11-11T18:00:00+01:00</published><updated>2022-11-11T18:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2022-11-11:/installing-tensorflow-serving-in-amazon-ec2-linux.html</id><summary type="html">&lt;p&gt;How to install and test Tensorflow Serving in a Amazon EC2 instance running
Amazon EC2 Linux 2. We will use docker and we will serve a resnet image. These
are the commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Install docker&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;docker
sudo&lt;span class="w"&gt; &lt;/span&gt;usermod&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;-G&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;ec2-user
newgrp&lt;span class="w"&gt; &lt;/span&gt;docker
sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker.service
sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;docker.service

&lt;span class="c1"&gt;# Prepare the resnet model&lt;/span&gt;
rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet
wget&lt;span class="w"&gt; &lt;/span&gt;https://tfhub.dev/tensorflow/resnet_50/classification/1?tf-hub-format&lt;span class="o"&gt;=&lt;/span&gt;compressed&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;resnet.tar.gz
mv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;?tf-hub-format&lt;span class="o"&gt;=&lt;/span&gt;compressed&lt;span class="w"&gt; &lt;/span&gt;resnet.tar.gz
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet/123
tar&lt;span class="w"&gt; &lt;/span&gt;xvfz&lt;span class="w"&gt; &lt;/span&gt;resnet.tar.gz&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet/123/

&lt;span class="c1"&gt;# Create and run a docker image with tensorflow serving using the resnet model&lt;/span&gt;
docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;serving_base&lt;span class="w"&gt; &lt;/span&gt;tensorflow/serving
docker&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet&lt;span class="w"&gt; &lt;/span&gt;serving_base:/models/resnet
docker&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;--change&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV MODEL_NAME resnet&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;serving_base&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;/resnet_serving
docker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;serving_base
docker&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;serving_base
docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8500&lt;/span&gt;:8500&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8501&lt;/span&gt;:8501&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;/resnet_serving&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To test that the serving works, you can run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;git
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/tensorflow/serving …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;How to install and test Tensorflow Serving in a Amazon EC2 instance running
Amazon EC2 Linux 2. We will use docker and we will serve a resnet image. These
are the commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Install docker&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;update
sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;docker
sudo&lt;span class="w"&gt; &lt;/span&gt;usermod&lt;span class="w"&gt; &lt;/span&gt;-a&lt;span class="w"&gt; &lt;/span&gt;-G&lt;span class="w"&gt; &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;ec2-user
newgrp&lt;span class="w"&gt; &lt;/span&gt;docker
sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;docker.service
sudo&lt;span class="w"&gt; &lt;/span&gt;systemctl&lt;span class="w"&gt; &lt;/span&gt;start&lt;span class="w"&gt; &lt;/span&gt;docker.service

&lt;span class="c1"&gt;# Prepare the resnet model&lt;/span&gt;
rm&lt;span class="w"&gt; &lt;/span&gt;-rf&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet
wget&lt;span class="w"&gt; &lt;/span&gt;https://tfhub.dev/tensorflow/resnet_50/classification/1?tf-hub-format&lt;span class="o"&gt;=&lt;/span&gt;compressed&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;resnet.tar.gz
mv&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;?tf-hub-format&lt;span class="o"&gt;=&lt;/span&gt;compressed&lt;span class="w"&gt; &lt;/span&gt;resnet.tar.gz
mkdir&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet/123
tar&lt;span class="w"&gt; &lt;/span&gt;xvfz&lt;span class="w"&gt; &lt;/span&gt;resnet.tar.gz&lt;span class="w"&gt; &lt;/span&gt;-C&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet/123/

&lt;span class="c1"&gt;# Create and run a docker image with tensorflow serving using the resnet model&lt;/span&gt;
docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;--name&lt;span class="w"&gt; &lt;/span&gt;serving_base&lt;span class="w"&gt; &lt;/span&gt;tensorflow/serving
docker&lt;span class="w"&gt; &lt;/span&gt;cp&lt;span class="w"&gt; &lt;/span&gt;/tmp/resnet&lt;span class="w"&gt; &lt;/span&gt;serving_base:/models/resnet
docker&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;--change&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ENV MODEL_NAME resnet&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;serving_base&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;/resnet_serving
docker&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;serving_base
docker&lt;span class="w"&gt; &lt;/span&gt;rm&lt;span class="w"&gt; &lt;/span&gt;serving_base
docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8500&lt;/span&gt;:8500&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8501&lt;/span&gt;:8501&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;/resnet_serving&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To test that the serving works, you can run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;yum&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;git
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/tensorflow/serving
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;serving/
pip3.7&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;numpy&lt;span class="w"&gt; &lt;/span&gt;pillow&lt;span class="w"&gt; &lt;/span&gt;requests
python3.7&lt;span class="w"&gt; &lt;/span&gt;tensorflow_serving/example/resnet_client.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="tensorflow, ec2"></category><category term="tensorflow"></category></entry><entry><title>Using IPVS in kube-proxy with eksctl</title><link href="https://jentrialgo.github.io/using-ipvs-in-kube-proxy-with-eksctl.html" rel="alternate"></link><published>2022-06-20T12:00:00+02:00</published><updated>2022-06-20T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2022-06-20:/using-ipvs-in-kube-proxy-with-eksctl.html</id><summary type="html">&lt;p&gt;I have a kubernetes cluster launched with &lt;code&gt;eksctl&lt;/code&gt;. I can get the configuration
of &lt;code&gt;kube-proxy&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl edit configmap kube-proxy-config -n kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I see that the default configuration uses the &lt;code&gt;iptables&lt;/code&gt; mode. In order to
change it, the &lt;code&gt;mode&lt;/code&gt; parameter has to be changed to &lt;code&gt;ipvs&lt;/code&gt; and the scheduler
parameter in the &lt;code&gt;ipvs&lt;/code&gt; section, which is initially empty, has to be assigned one
of &lt;a href="https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/#parameter-changes"&gt;these
policies&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rr: round-robin&lt;/li&gt;
&lt;li&gt;lc: least connection&lt;/li&gt;
&lt;li&gt;dh: destination hashing&lt;/li&gt;
&lt;li&gt;sh: source hashing&lt;/li&gt;
&lt;li&gt;sed: shortest expected delay&lt;/li&gt;
&lt;li&gt;nq: never queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that the corresponding kernel modules must be present in the working
node. You can connect with ssh to the node and check with modules are loaded
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lsmod | grep ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to apply the configuration, kube-proxy has to be restarted with this
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl rollout restart ds kube-proxy -n kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I get this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip_vs_sh               16384  0
ip_vs_wrr              16384  0
ip_vs_rr               16384  0
ip_vs                 176128  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack          163840  8 xt_conntrack,nf_nat,xt_state,xt_nat,nf_conntrack_netlink,xt_connmark,xt_MASQUERADE,ip_vs
nf_defrag_ipv6         24576  2 nf_conntrack,ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that the modules …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a kubernetes cluster launched with &lt;code&gt;eksctl&lt;/code&gt;. I can get the configuration
of &lt;code&gt;kube-proxy&lt;/code&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl edit configmap kube-proxy-config -n kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I see that the default configuration uses the &lt;code&gt;iptables&lt;/code&gt; mode. In order to
change it, the &lt;code&gt;mode&lt;/code&gt; parameter has to be changed to &lt;code&gt;ipvs&lt;/code&gt; and the scheduler
parameter in the &lt;code&gt;ipvs&lt;/code&gt; section, which is initially empty, has to be assigned one
of &lt;a href="https://kubernetes.io/blog/2018/07/09/ipvs-based-in-cluster-load-balancing-deep-dive/#parameter-changes"&gt;these
policies&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rr: round-robin&lt;/li&gt;
&lt;li&gt;lc: least connection&lt;/li&gt;
&lt;li&gt;dh: destination hashing&lt;/li&gt;
&lt;li&gt;sh: source hashing&lt;/li&gt;
&lt;li&gt;sed: shortest expected delay&lt;/li&gt;
&lt;li&gt;nq: never queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notice that the corresponding kernel modules must be present in the working
node. You can connect with ssh to the node and check with modules are loaded
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lsmod | grep ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to apply the configuration, kube-proxy has to be restarted with this
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl rollout restart ds kube-proxy -n kube-system
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I get this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ip_vs_sh               16384  0
ip_vs_wrr              16384  0
ip_vs_rr               16384  0
ip_vs                 176128  6 ip_vs_rr,ip_vs_sh,ip_vs_wrr
nf_conntrack          163840  8 xt_conntrack,nf_nat,xt_state,xt_nat,nf_conntrack_netlink,xt_connmark,xt_MASQUERADE,ip_vs
nf_defrag_ipv6         24576  2 nf_conntrack,ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This means that the modules for the policies lc and sed are not loaded. You can
load them running the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo modprobe ip_vs_sed
sudo modprobe ip_vs_lc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In my example, using a service with 7 replicas that takes around 200 ms of
processing, I see an extra 100 ms of latency added by the kube-proxy load
balancer when using the &lt;code&gt;iptables&lt;/code&gt; mode, and only 4 ms of latency added when
using the &lt;code&gt;ipvs&lt;/code&gt; mode, even when both are using the round-robin policy.&lt;/p&gt;</content><category term="kubernetes, eksctl, kube-proxy"></category><category term="kubernetes"></category><category term="eksctl"></category><category term="kube-proxy"></category></entry><entry><title>Pinning CPUs in Kubernetes using full-pcpus-only with eksctl</title><link href="https://jentrialgo.github.io/pinning-cpus-in-kubernetes-using-full-pcpus-only-with-eksctl.html" rel="alternate"></link><published>2022-05-16T12:00:00+02:00</published><updated>2022-05-16T12:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2022-05-16:/pinning-cpus-in-kubernetes-using-full-pcpus-only-with-eksctl.html</id><summary type="html">&lt;p&gt;I was trying to use the option &lt;code&gt;full-pcpus-only&lt;/code&gt; with eksctl and I was not
having luck. In the end, I was able to do it by using this &lt;code&gt;cluster.yaml&lt;/code&gt;
configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eksctl.io/v1alpha5&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterConfig&lt;/span&gt;

&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;k8s-Stokholm-Cluster&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eu-north-1&lt;/span&gt;

&lt;span class="nt"&gt;nodeGroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ng-1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;instanceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;c5.4xlarge&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;desiredCapacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;publicKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/joaquin/k8s/joaquin-k8s-stockholm.pub&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;kubeletExtraConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;cpuManagerPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;static&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;cpuManagerPolicyOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;full-pcpus-only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;kubeReserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300m&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300Mi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;ephemeral-storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1Gi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;kubeReservedCgroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/kube-reserved&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;systemReserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300m&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300Mi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;ephemeral-storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1Gi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;featureGates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;CPUManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;CPUManagerPolicyOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When my file had not the correct options, the problem I was seeing was that
eksctl got stuck with the message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;waiting for at least 1 node(s) to become ready in &amp;quot;ng-1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For debugging the errors, I connected by ssh to the EC2 instance that was
created and I check the logs of the kubelet service with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;journalctl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;kubelet.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to have the CPUs pinned to a physical CPU, I had to make the requests
and the limits equal (both for CPU and memory …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was trying to use the option &lt;code&gt;full-pcpus-only&lt;/code&gt; with eksctl and I was not
having luck. In the end, I was able to do it by using this &lt;code&gt;cluster.yaml&lt;/code&gt;
configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eksctl.io/v1alpha5&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ClusterConfig&lt;/span&gt;

&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;k8s-Stokholm-Cluster&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;eu-north-1&lt;/span&gt;

&lt;span class="nt"&gt;nodeGroups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ng-1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;instanceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;c5.4xlarge&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;desiredCapacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;ssh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;publicKeyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/home/joaquin/k8s/joaquin-k8s-stockholm.pub&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;kubeletExtraConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;cpuManagerPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;static&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;cpuManagerPolicyOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;full-pcpus-only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;kubeReserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300m&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300Mi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;ephemeral-storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1Gi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;kubeReservedCgroup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/kube-reserved&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;systemReserved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300m&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;300Mi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;ephemeral-storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1Gi&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;featureGates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;CPUManager&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;CPUManagerPolicyOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When my file had not the correct options, the problem I was seeing was that
eksctl got stuck with the message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;waiting for at least 1 node(s) to become ready in &amp;quot;ng-1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For debugging the errors, I connected by ssh to the EC2 instance that was
created and I check the logs of the kubelet service with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;journalctl&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;kubelet.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to have the CPUs pinned to a physical CPU, I had to make the requests
and the limits equal (both for CPU and memory). Also, the number of CPUs had to
be 2; if not, I got an &lt;code&gt;SMTAlignmentError&lt;/code&gt; when launching the pod.&lt;/p&gt;</content><category term="kubernetes, eksctl"></category><category term="kubernetes"></category><category term="eksctl"></category></entry><entry><title>Error cannot use path@version syntax in GOPATH mode</title><link href="https://jentrialgo.github.io/error-cannot-use-pathversion-syntax-in-gopath-mode.html" rel="alternate"></link><published>2021-12-15T12:00:00+01:00</published><updated>2021-12-15T12:00:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-12-15:/error-cannot-use-pathversion-syntax-in-gopath-mode.html</id><content type="html">&lt;p&gt;I was trying to install xk6 using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;go&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;go.k6.io/xk6/cmd/xk6@latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I got this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;package go.k6.io/xk6/cmd/xk6@latest: cannot use path@version syntax in GOPATH mode
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although I found &lt;a href="https://stackoverflow.com/q/54415733"&gt;a question in Stack
Overflow&lt;/a&gt; with that error, the given
solutions didn't work for me. In the end, I learned that the message was caused
because I was using an old version of Go: the &lt;code&gt;path@version&lt;/code&gt; was added in Go
1.16 and I was using 1.15. Thus, the solution for my problem was updating Go.&lt;/p&gt;</content><category term="go"></category><category term="go"></category></entry><entry><title>Reading traces from a file in k6</title><link href="https://jentrialgo.github.io/reading-traces-from-a-file-in-k6.html" rel="alternate"></link><published>2021-11-24T09:24:00+01:00</published><updated>2021-11-24T09:24:00+01:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-11-24:/reading-traces-from-a-file-in-k6.html</id><content type="html">&lt;p&gt;I wanted to read a trace of requests per second I have in a file and use it as
the injection pattern in k6. I could do it by reading the values into an array,
which is then used as the stages in a ramping arrival rate excutor, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k6/http&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;papaparse&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://jslib.k6.io/papaparse/5.1.1/index.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SharedArray&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k6/data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;trace_file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;PATH_TO_THE_TRACE_FILE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;SharedArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;another data name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;papaparse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;trace_file&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mf"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1s&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;discardResponseBodies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;scenarios&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;contacts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ramping-arrival-rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;startRate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;timeUnit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;preAllocatedVUs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;maxVUs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;stages&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://localhost:8555&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="k6"></category><category term="k6"></category><category term="kubernetes"></category></entry><entry><title>Configuring Ubuntu Server 20.04 LTS gateway</title><link href="https://jentrialgo.github.io/configuring-ubuntu-server-2004-lts-gateway.html" rel="alternate"></link><published>2021-10-20T10:00:00+02:00</published><updated>2021-10-20T10:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-10-20:/configuring-ubuntu-server-2004-lts-gateway.html</id><content type="html">&lt;p&gt;The current version of Ubuntu Server 20.04 LTS uses netplan in order to
configure the network. If it doesn't use cloud-init to provision the network,
the network configuration will be in a YAML file in &lt;code&gt;/etc/netplan&lt;/code&gt;. There you
can change the network parameters, such as the default gateway if you have a
fixed connection.&lt;/p&gt;
&lt;p&gt;After changing them, run this command to apply them (remember
that you may disconnect from the network, so don't run it from a remote
connection!):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;netplan&lt;span class="w"&gt; &lt;/span&gt;apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A more detailed explanation can be found in &lt;a href="https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-20-04/"&gt;this very helpful post at
linuxize&lt;/a&gt;.&lt;/p&gt;</content><category term="Ubuntu"></category><category term="Ubuntu"></category></entry><entry><title>Upgrading to dash 2.0</title><link href="https://jentrialgo.github.io/upgrading-to-dash-20.html" rel="alternate"></link><published>2021-10-05T14:20:00+02:00</published><updated>2021-10-05T14:20:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-10-05:/upgrading-to-dash-20.html</id><content type="html">&lt;p&gt;I had some dashboards built in Python with
&lt;a href="https://github.com/plotly/dash"&gt;Dash&lt;/a&gt;. They were using version 1.13.4 and I
updated it to version 2.0.0. In addition to converting the imports, as explained
in the &lt;a href="https://dash.plotly.com/dash-2-0-migration"&gt;migration guide&lt;/a&gt;, I also
had to change state variables because I was getting the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ValueError: The state keyword argument may not be provided without the input keyword argument
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I didn't understand the explanation in the migration guide. After reading the
&lt;a href="https://dash.plotly.com/basic-callbacks"&gt;new documentation about callbacks&lt;/a&gt;,
I've found that I had to change my &lt;code&gt;app_callbacks&lt;/code&gt;. Previously, I had something
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wl-plot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sol-select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;button-apply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n_clicks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;base-dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And I had to change it to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;wl-plot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sol-select&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;button-apply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n_clicks&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;component_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;base-dir&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;component_property&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, basically, now you only have a list of &lt;code&gt;Output&lt;/code&gt;, &lt;code&gt;Input&lt;/code&gt; and &lt;code&gt;State&lt;/code&gt;
instances and you don need the &lt;code&gt;state=...&lt;/code&gt;.&lt;/p&gt;</content><category term="Python"></category><category term="Python"></category><category term="Dash"></category></entry><entry><title>Meltdown and spectre checker</title><link href="https://jentrialgo.github.io/meltdown-and-spectre-checker.html" rel="alternate"></link><published>2021-10-04T19:20:00+02:00</published><updated>2021-10-04T19:20:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-10-04:/meltdown-and-spectre-checker.html</id><content type="html">&lt;p&gt;I've found &lt;a href="https://github.com/speed47/spectre-meltdown-checker"&gt;this script&lt;/a&gt; which is very handy to analyze if you Linux-based system is vulnerable to Spectre and Meltdown. I found this through &lt;a href="https://www.youtube.com/watch?v=2gB9U1EcCss"&gt;this talk&lt;/a&gt;.&lt;/p&gt;</content><category term="Security"></category><category term="Meltdown"></category><category term="Spectre"></category><category term="Security"></category><category term="CPU Architecture"></category></entry><entry><title>Changing the Pelican theme to Flex</title><link href="https://jentrialgo.github.io/changing-the-pelican-theme-to-flex.html" rel="alternate"></link><published>2021-09-30T22:20:00+02:00</published><updated>2021-09-30T22:20:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-09-30:/changing-the-pelican-theme-to-flex.html</id><content type="html">&lt;p&gt;In &lt;a href="https://jentrialgo.github.io/using-pelican-as-blogging-platform-for-github.html"&gt;a previous
post&lt;/a&gt; I
explained how to use Pelican with GitHub pages but didn't explain how to change
the theme. I've changed it now to use
&lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; and it was harder than
expected.&lt;/p&gt;
&lt;p&gt;Most of the guides I've found talked about cloning
&lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; in a folder on
your system and changing the variable &lt;code&gt;THEME&lt;/code&gt; to that folder. However, that
doesn't work when you are using GitHub actions to build your site because it
won't find that folder.&lt;/p&gt;
&lt;p&gt;My solution was cloning the theme I wanted, Flex, to a folder inside the root
folder of the blog:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/alexandrevicenzi/Flex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then I set in &lt;code&gt;pelicanconf.py&lt;/code&gt; the variable &lt;code&gt;THEME&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Flex&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to make it work with GitHub actions, I had to add in the file
&lt;code&gt;publi.sh&lt;/code&gt;, before calling &lt;code&gt;pelican&lt;/code&gt;, this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/alexandrevicenzi/Flex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After commiting and pushing, it worked.&lt;/p&gt;</content><category term="Blogging"></category><category term="Pelican"></category><category term="GitHub pages"></category><category term="Blog"></category></entry><entry><title>Integrating Prometheus, InfluxDB and Grafana</title><link href="https://jentrialgo.github.io/integrating-prometheus-influxdb-and-grafana.html" rel="alternate"></link><published>2021-09-29T00:00:00+02:00</published><updated>2021-09-29T00:00:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-09-29:/integrating-prometheus-influxdb-and-grafana.html</id><summary type="html">&lt;p&gt;I've got a Kubernetes cluster prepared to be be integrated with Prometheus,
i.e., all relevant information is exposed with &lt;code&gt;/metrics&lt;/code&gt; and scraped by a
Prometheus instance. I want to save the information long term and I've decided
that Influx DB is the best option for that. In addition, I want to create
dashboards using Grafana.&lt;/p&gt;
&lt;p&gt;This would require moving the information from Prometheus to Influx DB.
According to
&lt;a href="https://www.influxdata.com/blog/prometheus-remote-write-support-with-influxdb-2-0/"&gt;this&lt;/a&gt;,
for Influx DB v1, this would be accomplished by using directly remote writes in
Prometheus. However, Influx DB v2 doesn't allow this way of working. Instead,
Telegraf has to be inserted in the middle. Therefore, the whole pipeline would
be &lt;code&gt;Prometheus 🠮 Telegraf 🠮 Influx DB 🠮 Grafana&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'm using EKS to deploy the cluster, but these instructions should work with any
other Kubernetes cluster. I'll only assume that &lt;code&gt;kubectl&lt;/code&gt; is already configured
to work with your cluster. We are going to deploy many services, so you may
require new nodes in your cluster.&lt;/p&gt;
&lt;h2&gt;Helm&lt;/h2&gt;
&lt;p&gt;We'are going to use Helm for installing all the components, so first we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've got a Kubernetes cluster prepared to be be integrated with Prometheus,
i.e., all relevant information is exposed with &lt;code&gt;/metrics&lt;/code&gt; and scraped by a
Prometheus instance. I want to save the information long term and I've decided
that Influx DB is the best option for that. In addition, I want to create
dashboards using Grafana.&lt;/p&gt;
&lt;p&gt;This would require moving the information from Prometheus to Influx DB.
According to
&lt;a href="https://www.influxdata.com/blog/prometheus-remote-write-support-with-influxdb-2-0/"&gt;this&lt;/a&gt;,
for Influx DB v1, this would be accomplished by using directly remote writes in
Prometheus. However, Influx DB v2 doesn't allow this way of working. Instead,
Telegraf has to be inserted in the middle. Therefore, the whole pipeline would
be &lt;code&gt;Prometheus 🠮 Telegraf 🠮 Influx DB 🠮 Grafana&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'm using EKS to deploy the cluster, but these instructions should work with any
other Kubernetes cluster. I'll only assume that &lt;code&gt;kubectl&lt;/code&gt; is already configured
to work with your cluster. We are going to deploy many services, so you may
require new nodes in your cluster.&lt;/p&gt;
&lt;h2&gt;Helm&lt;/h2&gt;
&lt;p&gt;We'are going to use Helm for installing all the components, so first we install
helm with these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;curl&lt;span class="w"&gt; &lt;/span&gt;-fsSL&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;get_helm.sh&lt;span class="w"&gt; &lt;/span&gt;https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3

&lt;span class="w"&gt;    &lt;/span&gt;chmod&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;get_helm.sh

&lt;span class="w"&gt;    &lt;/span&gt;./get_helm.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Influx DB&lt;/h2&gt;
&lt;p&gt;To deploy Influx DB using Helm, we have to add the Influx DB helm repo and then
install it with these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;influxdata&lt;span class="w"&gt; &lt;/span&gt;https://helm.influxdata.com/

helm&lt;span class="w"&gt; &lt;/span&gt;upgrade&lt;span class="w"&gt; &lt;/span&gt;--install&lt;span class="w"&gt; &lt;/span&gt;my-influxdb&lt;span class="w"&gt; &lt;/span&gt;influxdata/influxdb2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run this command, per the instructions, to obtain the password and save it in
your password manager:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;myinfluxdb-influxdb2-auth&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;jsonpath={.data[&amp;#39;admin-password&amp;#39;]}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;base64&lt;span class="w"&gt; &lt;/span&gt;--decode&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, we are going to redirect the port for the Influx DB web console so that it
can be accessed from outside. Run this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;port-forward&lt;span class="w"&gt; &lt;/span&gt;service/my-influxdb-influxdb2&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8087&lt;/span&gt;:80&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;forward-influx.txt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you are using Visual Studio Code as I am, you should now forward port 8087
there as well.&lt;/p&gt;
&lt;p&gt;Open in a web browser &lt;a href="http://localhost:8087"&gt;http://localhost:8087&lt;/a&gt; and you should see the InfluxDB
console. You can log in with username &lt;code&gt;admin&lt;/code&gt; and the password for Influx DB
obtained above.&lt;/p&gt;
&lt;p&gt;We are going to use the Influx DB web console to create a token that will allow
us latter to write data from Telegraf and to read it from Grafana. In the
console, go to &lt;code&gt;Data | Tokens | Generate Token | Read/Write Token&lt;/code&gt;. Select the
permissions to write and read in the &lt;code&gt;default&lt;/code&gt; bucket, give the token a name and
save it. Next, select it to see it. Write it down, as we will need it later.&lt;/p&gt;
&lt;p&gt;In case you need to check the logs of Influx DB, you can do it with this
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;logs&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;app.kubernetes.io/name&lt;span class="o"&gt;=&lt;/span&gt;influxdb2&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{ .items[0].metadata.name }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Telegraf&lt;/h2&gt;
&lt;p&gt;Install Telegraf with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm&lt;span class="w"&gt; &lt;/span&gt;upgrade&lt;span class="w"&gt; &lt;/span&gt;--install&lt;span class="w"&gt; &lt;/span&gt;my-telegraf&lt;span class="w"&gt; &lt;/span&gt;influxdata/telegraf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that, at least at the time of writing, the instructions given by helm for
running an interactive shell and obtaining the logs  are wrong because the
labels are wrong. These would be the correct commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;app.kubernetes.io/name&lt;span class="o"&gt;=&lt;/span&gt;telegraf&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;/bin/sh

kubectl&lt;span class="w"&gt; &lt;/span&gt;logs&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;app.kubernetes.io/name&lt;span class="o"&gt;=&lt;/span&gt;telegraf&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{ .items[0].metadata.name }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see some errors in the log because the output configuration of
Telegraf is wrong. We are going to fix it next.&lt;/p&gt;
&lt;p&gt;We are going to change Telegraf's configuration, which can be carried out with
the command to edit its configmap:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;edit&lt;span class="w"&gt; &lt;/span&gt;configmap/my-telegraf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remove all this part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;outputs.influxdb&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;database&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;telegraf&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nv"&gt;urls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://influxdb.monitoring.svc:8086&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And write this in its place:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;inputs.http_listener_v2&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;service_address&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:1234&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/receive&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;data_format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prometheusremotewrite&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;[[&lt;/span&gt;outputs.influxdb_v2&lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;urls&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://my-influxdb-influxdb2:80&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$INFLUX_TOKEN&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;organization&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;influxdata&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;bucket&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You have to exchange the &lt;code&gt;$INFLUX_TOKEN&lt;/code&gt; with the token that you obtained before
from the InfluxDB web console.&lt;/p&gt;
&lt;p&gt;This prepares Telegraf to receive the information in port 1234 with the path
&lt;code&gt;/receive&lt;/code&gt; and forward the data to Influx DB.&lt;/p&gt;
&lt;p&gt;In addition, increase the value of &lt;code&gt;metric_buffer_limit&lt;/code&gt; to something like
50000.&lt;/p&gt;
&lt;p&gt;In order to make Telegraf use this new configuration, save it and run this
program that kills the pod and makes kubernetes create a new one with the new
configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;delete&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;app.kubernetes.io/name&lt;span class="o"&gt;=&lt;/span&gt;telegraf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check Telegraf's logs to see that there is no problem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;logs&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;app.kubernetes.io/name&lt;span class="o"&gt;=&lt;/span&gt;telegraf&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{ .items[0].metadata.name }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In addition, we have to create a service so that Telegraf can be reached at
&lt;code&gt;http://my-telegraph:1234&lt;/code&gt; because by default it only exposes port 8125. Change
the configuration of Telegraf's service with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;edit&lt;span class="w"&gt; &lt;/span&gt;svc/my-telegraf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add this in the &lt;code&gt;ports&lt;/code&gt; section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;http-listener
&lt;span class="w"&gt;      &lt;/span&gt;port:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1234&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;protocol:&lt;span class="w"&gt; &lt;/span&gt;TCP
&lt;span class="w"&gt;      &lt;/span&gt;targetPort:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1234&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you should see with this command that Telegraf's service is also listening
in port 1234:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;services
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Prometheus&lt;/h2&gt;
&lt;p&gt;If you don't have Prometheus installed in your system yet, you can do it with
these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;prometheus-community&lt;span class="w"&gt; &lt;/span&gt;https://prometheus-community.github.io/helm-charts

helm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;my-prometheus&lt;span class="w"&gt; &lt;/span&gt;prometheus-community/prometheus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Edit Prometheus configuration with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;edit&lt;span class="w"&gt; &lt;/span&gt;cm/my-prometheus-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add this line, at the same level as the &lt;code&gt;global&lt;/code&gt; section, i.e., inside the
&lt;code&gt;prometheus.yml&lt;/code&gt; section, in order to make Prometheus write the data to
Telegraf:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;remote_write:
&lt;span class="w"&gt;    &lt;/span&gt;-&lt;span class="w"&gt; &lt;/span&gt;url:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://my-telegraf:1234/receive&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Prometheus should read the new configuration automatically once you save it.
Run this command to see the Prometheus log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;logs&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prometheus&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;server&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{ .items[0].metadata.name }&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;prometheus-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything is OK, you should be able to see in the &lt;code&gt;Explore&lt;/code&gt; section of the
Influx DB web console a &lt;code&gt;prometheus_remote_write&lt;/code&gt; section with metrics about the
cluster. If you want to plot the CPU utilization, for example, you can select
the Script editor and use this query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;import&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;experimental/aggregate&amp;quot;&lt;/span&gt;
from&lt;span class="o"&gt;(&lt;/span&gt;bucket:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;range&lt;span class="o"&gt;(&lt;/span&gt;start:&lt;span class="w"&gt; &lt;/span&gt;v.timeRangeStart,&lt;span class="w"&gt; &lt;/span&gt;stop:&lt;span class="w"&gt; &lt;/span&gt;v.timeRangeStop&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;filter&lt;span class="o"&gt;(&lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_measurement&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prometheus_remote_write&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;filter&lt;span class="o"&gt;(&lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cpu&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;filter&lt;span class="o"&gt;(&lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_field&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container_cpu_usage_seconds_total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;aggregateWindow&lt;span class="o"&gt;(&lt;/span&gt;every:&lt;span class="w"&gt; &lt;/span&gt;v.windowPeriod,&lt;span class="w"&gt; &lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;mean,&lt;span class="w"&gt; &lt;/span&gt;createEmpty:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;aggregate.rate&lt;span class="o"&gt;(&lt;/span&gt;every:&lt;span class="w"&gt; &lt;/span&gt;1m,&lt;span class="w"&gt; &lt;/span&gt;unit:&lt;span class="w"&gt; &lt;/span&gt;1s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;yield&lt;span class="o"&gt;(&lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mean&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Submit it and you should see some data.&lt;/p&gt;
&lt;h2&gt;Grafana&lt;/h2&gt;
&lt;p&gt;Install Grafana with these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm&lt;span class="w"&gt; &lt;/span&gt;repo&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;grafana&lt;span class="w"&gt; &lt;/span&gt;https://grafana.github.io/helm-charts

helm&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;my-grafana&lt;span class="w"&gt; &lt;/span&gt;grafana/grafana&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;sidecar.datasources.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;sidecar.dashboards.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;sidecar.datasources.label&lt;span class="o"&gt;=&lt;/span&gt;grafana_datasource&lt;span class="w"&gt; &lt;/span&gt;--set&lt;span class="w"&gt; &lt;/span&gt;sidecar.dashboards.label&lt;span class="o"&gt;=&lt;/span&gt;grafana_dashboard
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Follow the instructions to get Grafana's password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;secret&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;my-grafana&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{.data.admin-password}&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;base64&lt;span class="w"&gt; &lt;/span&gt;--decode&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In addition, forward port 3000 of Grafana so that you can access its web
console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;POD_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;kubectl&lt;span class="w"&gt; &lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;pods&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;-l&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;app.kubernetes.io/name=grafana,app.kubernetes.io/instance=my-grafana&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;jsonpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{.items[0].metadata.name}&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
kubectl&lt;span class="w"&gt; &lt;/span&gt;--namespace&lt;span class="w"&gt; &lt;/span&gt;default&lt;span class="w"&gt; &lt;/span&gt;port-forward&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$POD_NAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3000&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;forward-grafana.txt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that I've changed the forward command so that it redirects its output.
Forward the port also in Visual Studio Code if you are using it and open
&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to access Grafana console.&lt;/p&gt;
&lt;p&gt;Log in with username &lt;code&gt;admin&lt;/code&gt; and the password obtained above.&lt;/p&gt;
&lt;p&gt;Now, we are going to add InfluxDB as a source for Grafana. In Grafana's web
console, go to &lt;code&gt;Data sources | Add your first data source&lt;/code&gt; and select
&lt;code&gt;InfluxDB&lt;/code&gt;. Select &lt;code&gt;Flux&lt;/code&gt; in the Query Language to use the new syntax. Enter
this information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL: &lt;code&gt;http://my-influxdb-influxdb2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Uncheck the toggle in &lt;code&gt;Basic Auth&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Organization: &lt;code&gt;influxdata&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Token: the one obtained from InfluxDB at the beginning. It's the same one used
  for allowing Telegraf writing in InfluxDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click on &lt;code&gt;Save and test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add a new Dashboard and a new panel. You can add the query given above to check
that the connection between all elements works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;import&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;experimental/aggregate&amp;quot;&lt;/span&gt;
from&lt;span class="o"&gt;(&lt;/span&gt;bucket:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;range&lt;span class="o"&gt;(&lt;/span&gt;start:&lt;span class="w"&gt; &lt;/span&gt;v.timeRangeStart,&lt;span class="w"&gt; &lt;/span&gt;stop:&lt;span class="w"&gt; &lt;/span&gt;v.timeRangeStop&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;filter&lt;span class="o"&gt;(&lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_measurement&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prometheus_remote_write&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;filter&lt;span class="o"&gt;(&lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;cpu&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;filter&lt;span class="o"&gt;(&lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;r&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_field&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;container_cpu_usage_seconds_total&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;aggregateWindow&lt;span class="o"&gt;(&lt;/span&gt;every:&lt;span class="w"&gt; &lt;/span&gt;v.windowPeriod,&lt;span class="w"&gt; &lt;/span&gt;fn:&lt;span class="w"&gt; &lt;/span&gt;mean,&lt;span class="w"&gt; &lt;/span&gt;createEmpty:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;aggregate.rate&lt;span class="o"&gt;(&lt;/span&gt;every:&lt;span class="w"&gt; &lt;/span&gt;1m,&lt;span class="w"&gt; &lt;/span&gt;unit:&lt;span class="w"&gt; &lt;/span&gt;1s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;yield&lt;span class="o"&gt;(&lt;/span&gt;name:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mean&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Kubernetes"></category><category term="Kubernetes"></category><category term="Prometheus"></category><category term="Telegraf"></category><category term="InfluxDB"></category><category term="Grafana"></category></entry><entry><title>Using Pelican as blogging platform for GitHub</title><link href="https://jentrialgo.github.io/using-pelican-as-blogging-platform-for-github.html" rel="alternate"></link><published>2021-09-28T22:20:00+02:00</published><updated>2021-09-28T22:20:00+02:00</updated><author><name>J.E.</name></author><id>tag:jentrialgo.github.io,2021-09-28:/using-pelican-as-blogging-platform-for-github.html</id><summary type="html">&lt;p&gt;So I guess my first blog should be about setting up this blog.&lt;/p&gt;
&lt;p&gt;I wanted to use GitHub pages. By default they use Jekyll, which is built with
Ruby. I have no experience with that language, so I tried to use something
Python-based. I found &lt;a href="https://avinal.space/posts/development/twilight-blog.html"&gt;this post about using
Pelican&lt;/a&gt;, but I had
some problems. I'm going to try to give here step by step instructions, using
Linux.&lt;/p&gt;
&lt;p&gt;Create a directory for the blog, an environment and activate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;blog
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install pelican with one of these options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This option only allows reStructuredText&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican

&lt;span class="c1"&gt;# This allows markdown and reStructuredText&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the basic structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I'll leave the standard theme. Read in the &lt;a href="https://avinal.space/posts/development/twilight-blog.html"&gt;mentioned
post&lt;/a&gt; if you want to
change the theme.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; I've created a new post about &lt;a href="https://jentrialgo.github.io/changing-the-pelican-theme-to-flex.html"&gt;how to change the style to
Flex&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test locally the blog, generate the site with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now start a web server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I guess my first blog should be about setting up this blog.&lt;/p&gt;
&lt;p&gt;I wanted to use GitHub pages. By default they use Jekyll, which is built with
Ruby. I have no experience with that language, so I tried to use something
Python-based. I found &lt;a href="https://avinal.space/posts/development/twilight-blog.html"&gt;this post about using
Pelican&lt;/a&gt;, but I had
some problems. I'm going to try to give here step by step instructions, using
Linux.&lt;/p&gt;
&lt;p&gt;Create a directory for the blog, an environment and activate it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir&lt;span class="w"&gt; &lt;/span&gt;blog
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;blog
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;.venv
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install pelican with one of these options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# This option only allows reStructuredText&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican

&lt;span class="c1"&gt;# This allows markdown and reStructuredText&lt;/span&gt;
python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Create the basic structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I'll leave the standard theme. Read in the &lt;a href="https://avinal.space/posts/development/twilight-blog.html"&gt;mentioned
post&lt;/a&gt; if you want to
change the theme.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; I've created a new post about &lt;a href="https://jentrialgo.github.io/changing-the-pelican-theme-to-flex.html"&gt;how to change the style to
Flex&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To test locally the blog, generate the site with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now start a web server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make&lt;span class="w"&gt; &lt;/span&gt;serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can see the default blog in &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to add content, you should create your files in the &lt;code&gt;content&lt;/code&gt;
directory. For instance, you can create an &lt;code&gt;about.md&lt;/code&gt; file with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: About
Date: 2021-09-28 20:20
Category: About

This is just a blog.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; This type of pages which are not articles should usually go in a
folder called &lt;code&gt;pages&lt;/code&gt; inside the &lt;code&gt;content&lt;/code&gt; folder. See the &lt;a href="https://docs.getpelican.com/en/3.6.3/content.html#pages"&gt;documentation
about them&lt;/a&gt; in the
Pelican docs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can make the html again and serve it to test it locally, but the idea is
using GitHub actions so that when this code is push to a repository, the
website is generated.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;code&gt;publi.sh&lt;/code&gt; with this content (change the email and the user
name):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#! /bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# install tools&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-y&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;python3-pip&lt;span class="w"&gt; &lt;/span&gt;python3-setuptools&lt;span class="w"&gt; &lt;/span&gt;python3-wheel

&lt;span class="c1"&gt;# setup github config&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;user.email&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUR_E_MAIL&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Change this&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;config&lt;span class="w"&gt; &lt;/span&gt;user.name&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;YOUR_USERNAME&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;# Change this&lt;/span&gt;

&lt;span class="c1"&gt;# install dependencies&lt;/span&gt;
sudo&lt;span class="w"&gt; &lt;/span&gt;pip3&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;requirements.txt

&lt;span class="c1"&gt;# pelican commands - install theme put your theme in themes directory&lt;/span&gt;
&lt;span class="c1"&gt;#pelican-themes --install themes/theme-name&lt;/span&gt;
pelican

&lt;span class="c1"&gt;# publish to github pages&lt;/span&gt;
ghp-import&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Generate Pelican site&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;gh-pages&lt;span class="w"&gt; &lt;/span&gt;output
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that here I had to make changes from the instructions in the original
post. Another piece of information I found missing in the original post is that
you have to create the &lt;code&gt;requirements.txt&lt;/code&gt; file with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip&lt;span class="w"&gt; &lt;/span&gt;freeze&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add and &lt;code&gt;.ignore&lt;/code&gt; file with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;*~&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DS_Store&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swp&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;out&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cod&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, create a repository in GitHub with the name &lt;code&gt;USERNAME.github.io&lt;/code&gt;, using
your user name instead of &lt;code&gt;USERNAME&lt;/code&gt;. Follow the instructions in GitHub to
import the files in your directory as the content of the repository. Basically,
it should be something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Create repository&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;init&lt;span class="w"&gt; &lt;/span&gt;-b&lt;span class="w"&gt; &lt;/span&gt;main

&lt;span class="c1"&gt;# Add and commit current files&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;.
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Initial structure&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Add the GitHub repo as a remote&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;--set-upstream&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main

&lt;span class="c1"&gt;# Push the files to the remote&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go to the GitHub page of the repository and then to the &lt;code&gt;Actions&lt;/code&gt; section and
click on &lt;code&gt;Set up a workflow yourself&lt;/code&gt;. Then, paste this code and commit it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Publish Blog&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;pull_request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;set up permissions&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;chmod +x publi.sh&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run a multi-line script&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./publi.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, pull the changes to your local repo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git&lt;span class="w"&gt; &lt;/span&gt;pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the GitHub interface, you should be able to see in the branch &lt;code&gt;gh-pages&lt;/code&gt; the
content of your blog, i.e., the HTML, CSS and javascript files that you also
obtain in your local &lt;code&gt;output&lt;/code&gt; directory when you run &lt;code&gt;make html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Go to the settings in your GitHub repo, select the &lt;code&gt;Pages&lt;/code&gt; option in the menu
and in the &lt;code&gt;Source&lt;/code&gt; section, indicate that your source is the branch &lt;code&gt;gh-pages&lt;/code&gt;.
Check that it is using the &lt;code&gt;root&lt;/code&gt; directory of this branch.&lt;/p&gt;
&lt;p&gt;If everything is correct, you should be able to see your blog by going to
&lt;code&gt;USERNAME.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to add new content, create a new file in the &lt;code&gt;content&lt;/code&gt; folder, be
sure to use the basic fields required for pelican (you can see them in the
example &lt;code&gt;about&lt;/code&gt; post above), add and commit the file, and (after testing locally
if you want) push the files to the remote directory. After the GitHub action has
finished you should be able to see your new post in your GitHub page.&lt;/p&gt;
&lt;p&gt;If you don't see it, check your GitHub actions page, where you can find
errors that are generated after each push.&lt;/p&gt;</content><category term="Blogging"></category><category term="Pelican"></category><category term="GitHub pages"></category><category term="Blog"></category></entry></feed>